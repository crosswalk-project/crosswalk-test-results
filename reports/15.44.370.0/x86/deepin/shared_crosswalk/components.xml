<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../../../style/components.xsl"?><test_definition><environment arch="X86" branch="Stable" build="15.44.370.0" hardware="Desktop" platform="Deepin" segment="Shared Crosswalk" /><category name="Hosted Website Apps"><testcase id="12306_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="12306_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="12306_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="12306_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Cargo_Bridge_Feature" purpose="Validate the feature operate of the app is normal" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3670  XWALK-3670]]</testcase><testcase id="Cargo_Bridge_Link" purpose="Validate the link operate of the app is normal" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3670  XWALK-3670]]</testcase><testcase id="Cargo_Bridge_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Cargo_Bridge_UI" purpose="Validate the UI of the app display normally" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3670  XWALK-3670]]</testcase><testcase id="Chainrxn_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Chainrxn_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Chainrxn_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Chainrxn_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Dbank_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Dbank_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Dbank_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Dbank_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Doit_im_Feature" purpose="Validate the feature operate of the app is normal" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-3695 XWALK-3695]]</testcase><testcase id="Doit_im_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Doit_im_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Doit_im_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Douban_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Douban_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Douban_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Douban_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Fetion_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Fetion_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Fetion_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Fetion_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="FM_Baidu_Feature" purpose="Validate the feature operate of the app is normal" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4179 XWALK-4179]]</testcase><testcase id="FM_Baidu_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="FM_Baidu_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="FM_Baidu_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="IM_Baidu_Feature" purpose="Validate the feature operate of the app is normal" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4166 XWALK-4166]]</testcase><testcase id="IM_Baidu_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="IM_Baidu_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="IM_Baidu_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Kingsoft_Fast_Docs_Feature" purpose="Validate the feature operate of the app is normal" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3791 XWALK-3791]]</testcase><testcase id="Kingsoft_Fast_Docs_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Kingsoft_Fast_Docs_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Kingsoft_Fast_Docs_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Kingsoft_Pan_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Kingsoft_Pan_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Kingsoft_Pan_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Kingsoft_Pan_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Kugou_Music_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Kugou_Music_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Kugou_Music_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Kugou_Music_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Kuwo_Music_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Kuwo_Music_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Kuwo_Music_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Kuwo_Music_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Map_Baidu_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Map_Baidu_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Map_Baidu_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Map_Baidu_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Microsoft_Skydrive_Feature" purpose="Validate the feature operate of the app is normal" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-4210 XWALK-4210]]</testcase><testcase id="Microsoft_Skydrive_Link" purpose="Validate the link operate of the app is normal" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-4210 XWALK-4210]]</testcase><testcase id="Microsoft_Skydrive_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Microsoft_Skydrive_UI" purpose="Validate the UI of the app display normally" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-4210 XWALK-4210]]</testcase><testcase id="Pan_Baidu_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Pan_Baidu_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Pan_Baidu_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Pan_Baidu_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Paulrouget_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Paulrouget_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Paulrouget_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Paulrouget_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Pirateslovedaisies_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Pirateslovedaisies_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Pirateslovedaisies_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Pirateslovedaisies_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Sina_Weibo_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Sina_Weibo_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Sina_Weibo_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Sina_Weibo_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Towerim_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Towerim_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Towerim_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Towerim_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Ttpod_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Ttpod_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Ttpod_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Ttpod_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Xiami_Music_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Xiami_Music_Link" purpose="Validate the link operate of the app is normal" result="PASS" /><testcase id="Xiami_Music_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Xiami_Music_UI" purpose="Validate the UI of the app display normally" result="PASS" /><testcase id="Youdao_Note_Feature" purpose="Validate the feature operate of the app is normal" result="PASS" /><testcase id="Youdao_Note_Link" purpose="Validate the link operate of the app is normal" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4532 XWALK-4532]]</testcase><testcase id="Youdao_Note_Name" purpose="Validate the name of the app is normal and show in the launcher" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="Youdao_Note_UI" purpose="Validate the UI of the app display normally" result="PASS" /></category><category name="Sample Apps"><testcase id="HangOnMan_AppFunction" purpose="Validate if sample app HangOnMan function could work well" result="PASS" /><testcase id="HangOnMan_Close" purpose="Validate sample app HangOnMan could be closed successfully" result="PASS" /><testcase id="HangOnMan_Icon" purpose="Validate if sample app HangOnMan icon display normally" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="HangOnMan_Launch" purpose="Validate sample app HangOnMan could be launched successfully" result="PASS" /><testcase id="HangOnMan_Switch" purpose="Validate if sample app HangOnMan could switch back successfully" result="PASS" /><testcase id="HexGL_AppFunction" purpose="Validate if sample app HexGL function could work well" result="PASS" /><testcase id="HexGL_Close" purpose="Validate sample app HexGL could be closed successfully" result="PASS" /><testcase id="HexGL_Icon" purpose="Validate if sample app HexGL icon display normally" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="HexGL_Launch" purpose="Validate sample app HexGL could be launched successfully" result="PASS" /><testcase id="HexGL_Switch" purpose="Validate if sample app HexGL could switch back successfully" result="PASS" /><testcase id="MemoryGame_AppFunction" purpose="Validate if sample app MemoryGame function could work well" result="PASS" /><testcase id="MemoryGame_Close" purpose="Validate sample app MemoryGame could be closed successfully" result="PASS" /><testcase id="MemoryGame_Icon" purpose="Validate if sample app MemoryGame icon display normally" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3658 XWALK-3658]]</testcase><testcase id="MemoryGame_Launch" purpose="Validate sample app MemoryGame could be launched successfully" result="PASS" /><testcase id="MemoryGame_Switch" purpose="Validate if sample app MemoryGame could switch back successfully" result="PASS" /></category><category name="Crosswalk Use Cases/WRT"><testcase id="ApplicationCookies" purpose="ApplicationCookies" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4150 XWALK-4150]]</testcase><testcase id="ApplicationCookies_Reboot" purpose="ApplicationCookies_Reboot" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4150 XWALK-4150]]</testcase><testcase id="ApplicationCookies_Relaunch" purpose="ApplicationCookies_Relaunch" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4150 XWALK-4150]]</testcase><testcase id="ApplicationCookies_Upgrade" purpose="ApplicationCookies_Upgrade" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4150 XWALK-4150]]</testcase><testcase id="ApplicationIndexDB" purpose="ApplicationIndexDB" result="PASS" /><testcase id="ApplicationIndexDB_Reboot" purpose="ApplicationIndexDB_Reboot" result="PASS" /><testcase id="ApplicationIndexDB_Relaunch" purpose="ApplicationIndexDB_Relaunch" result="PASS" /><testcase id="ApplicationIndexDB_Upgrade" purpose="ApplicationIndexDB_Upgrade" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3820 XWALK-3820]]</testcase><testcase id="ApplicationLocalStorage" purpose="ApplicationLocalStorage" result="PASS" /><testcase id="ApplicationLocalStorage_Reboot" purpose="ApplicationLocalStorage_Reboot" result="PASS" /><testcase id="ApplicationLocalStorage_Relaunch" purpose="ApplicationLocalStorage_Relaunch" result="PASS" /><testcase id="ApplicationLocalStorage_Upgrade" purpose="ApplicationLocalStorage_Upgrade" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-3946 XWALK-3946]]</testcase><testcase id="CSP" purpose="CSP" result="PASS" /><testcase id="DisplayMode_defaultmode" purpose="DisplayMode" result="PASS" /><testcase id="DisplayMode_fullscreen" purpose="DisplayMode" result="PASS" /><testcase id="DisplayMode_minimalui" purpose="DisplayMode" result="PASS" /><testcase id="DisplayMode_standalone" purpose="DisplayMode" result="PASS" /><testcase id="ExternalURL" purpose="ExternalURL" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4533 XWALK-4533]]</testcase><testcase id="Flash" purpose="Flash" result="PASS" /><testcase id="MediaCodec_audioplay" purpose="MediaCodec" result="PASS" /><testcase id="MediaCodec_videoplay" purpose="MediaCodec" result="PASS" /><testcase id="StartURL_localsource" purpose="StartURL" result="PASS" /><testcase id="StartURL_websource" purpose="StartURL" result="PASS" /><testcase id="SystemIMEs" purpose="SystemIMEs Test" result="PASS" /><testcase id="WebNotification" purpose="WebNotification" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-4541 XWALK-4541]]</testcase><testcase id="WindowSize_allmembersspecified" purpose="WindowSize" result="PASS" /><testcase id="WindowSize_widthheight" purpose="WindowSize" result="PASS" /><testcase id="WindowSize_xwalkboundsfullscreen" purpose="WindowSize" result="PASS" /></category><category name="W3C_HTML5 APIs/Media/HTML5 The audio element"><testcase id="audio_autoplay_attribute_exists" purpose="Check if the audio.autoplay attritbute exists" result="PASS" /><testcase id="audio_autoplay_attribute_type" purpose="Check if the type of audio.autoplay attribute is boolean" result="PASS" /><testcase id="audio_autoplay_default_value" purpose="Check if audio.autoplay attribute default is false" result="PASS" /><testcase id="audio_autoplay_empty_string" purpose="Check if the attribute audio.autoplay is false when set it empty string" result="PASS" /><testcase id="audio_autoplay_null" purpose="Check if the value of attribute of audio.autoplay is false when you set it null" result="PASS" /><testcase id="audio_autoplay_onloadedmetadata" purpose="Check if audio.autoplay attribute invoked,then audio.onloadedmetadata() function triggered" result="PASS" /><testcase id="audio_autoplay_true_autoplay_present" purpose="Check if audio.autoplay returns true when the controls attribute is present in the audio element" result="PASS" /><testcase id="audio_buffered_end_type" purpose="Check if the type of audio.buffered.end is function" result="PASS" /><testcase id="audio_buffered_exists" purpose="Check if the audio.buffered attribute exists" result="PASS" /><testcase id="audio_buffered_length_default_value" purpose="Check if the audio.buffered length is zero,typically this will be a single range anchored at the zero point" result="PASS" /><testcase id="audio_buffered_readonly" purpose="Check if the audio.buffered attribute is readonly" result="PASS" /><testcase id="audio_buffered_start_type" purpose="Check if the type of audio.buffered.start is function" result="PASS" /><testcase id="audio_buffered_type" purpose="Check if the type of audio.buffered is object" result="PASS" /><testcase id="audio_canplaytype_application_octet_stream" purpose="Check that audio.canPlayType method support octet-stream" result="PASS" /><testcase id="audio_canplaytype_bogus_type" purpose="Check that audio.canPlayType method support marks-fantasmagorical-format" result="PASS" /><testcase id="audio_canPlayType_codecs_order" purpose="Check if the codecs parameter order of audio.canPlayType" result="PASS" /><testcase id="audio_canPlayType_empty_string" purpose="Check if audio.canPlayType return empty string if arguments is a empty string" result="PASS" /><testcase id="audio_canplaytype_method_exists" purpose="Check that audio.canPlayType method exists" result="PASS" /><testcase id="audio_canPlayType_method_type" purpose="Check if the type of audio.canplayType is 'function'" result="PASS" /><testcase id="audio_canPlayType_mp3" purpose="Check if the browser really supports playing MP3s" result="PASS" /><testcase id="audio_canplaytype_mp4_supported_but_no_codecs_parameter" purpose="Check that audio.canPlayType method supported mp4 format codecs parameter" result="PASS" /><testcase id="audio_canPlayType_null" purpose="Check if audio.canPlayType return empty string if arguments is null" result="PASS" /><testcase id="audio_canplaytype_ogg_supported_but_no_codecs_parameter" purpose="Check that audio.canPlayType method supported ogg format codecs parameter" result="PASS" /><testcase id="audio_canPlayType_return_maybe" purpose="Check if audio.canPlayType() return maybe if the argument is 'audio/ogg'" result="PASS" /><testcase id="audio_canPlayType_return_probably" purpose="Check if the method audio.canPlayType() return probably if video can play the ogg type" result="PASS" /><testcase id="audio_constructor" purpose="Check if new Audio() returns a new audio element" result="PASS" /><testcase id="audio_constructor_src" purpose="Check if new Audio( url ) returns a new audio element" result="PASS" /><testcase id="audio_controller_attribute_exists" purpose="Check if the audio.controller exists" result="FAIL" /><testcase id="audio_controller_attribute_type" purpose="Check if the type of audio.controller is object" result="FAIL" /><testcase id="audio_controller_default_value" purpose="Check if the defaut value of audio.controller is null" result="FAIL" /><testcase id="audio_controller_MediaController" purpose="Check if the attribute audio.controller is not null when set it an object MediaController" result="FAIL" /><testcase id="audio_controls_attribute_exists" purpose="Check if the audio.controls exists" result="PASS" /><testcase id="audio_controls_attribute_type" purpose="Check if the type of audio.controls is boolean" result="PASS" /><testcase id="audio_controls_empty_string" purpose="Check if the value of attribute audio.controls is false when set it empty string" result="PASS" /><testcase id="audio_controls_false_controls_absent" purpose="Check if audio.controls returns false when the controls attribute is absent in the audio element" result="PASS" /><testcase id="audio_controls_null" purpose="Check if the value of attribute audio.controls is false when set it null" result="PASS" /><testcase id="audio_controls_present_manual" purpose="Check that user agent can expose a controller if  the controls attribute is provide for the audio element." result="FAIL" /><testcase id="audio_controls_reflects_false" purpose="Check that audio.controls returns false if the controls attribute is set to false" result="PASS" /><testcase id="audio_controls_reflects_true" purpose="Check that audio.controls returns true if the controls attribute is set to true" result="PASS" /><testcase id="audio_controls_true_controls_present" purpose="Check that audio.controls returns true if the controls attribute is present in the audio element" result="PASS" /><testcase id="audio_currentSrc_attribute_type" purpose="Check if the type of audio.currentsrc is string" result="PASS" /><testcase id="audio_currentSrc_default_value" purpose="Check if the default value of audio.currentSrc is a empty string" result="PASS" /><testcase id="audio_currentsrc_empty_if_no_src" purpose="Check that audio.currentSrc returns empty if there is no source" result="PASS" /><testcase id="audio_currentsrc_nonempty_after_adding_source_child" purpose="Check that audio.currentSrc returns non-empty if add source element" result="PASS" /><testcase id="audio_currentsrc_nonempty_after_setting_src" purpose="Check that audio.currentSrc returns non-empty after setting src attribute" result="PASS" /><testcase id="audio_currentsrc_property_exists" purpose="Check if the audio.currentSrc property exists" result="PASS" /><testcase id="audio_currentSrc_readonly" purpose="Check if the audio.currentSrc attribute is readonly" result="PASS" /><testcase id="audio_currentSrc_src_empty_string" purpose="Check if audio.currentSrc is empty string when set the audio.src empty string" result="PASS" /><testcase id="audio_currentSrc_src_null" purpose="Check if audio.currentSrc is empty string when set the audio.src null" result="PASS" /><testcase id="audio_currentTime_attribute_exists" purpose="Check if the audio.currentTime attribute exists" result="PASS" /><testcase id="audio_currentTime_attribute_type" purpose="Check if the type of audio.currentTime attribute is number" result="PASS" /><testcase id="audio_currentTime_basic" purpose="Check if the audio.currentTime attribute return the current playback position it was set to 10" result="PASS" /><testcase id="audio_currentTime_default_value" purpose="Check if the audio.currentTime attribute initially be zero seconds in the absence of media data" result="PASS" /><testcase id="audio_currentTime_exception_INVALID_STATE_ERR" purpose="Check if the audio.currentTime attribute on setting that expecting TYPE_MISMATCH_ERR exception is to be thrown" result="PASS" /><testcase id="audio_currentTime_value_duration" purpose="Check if the audio.currentTime attribute return the end playback position it was set to duration" result="PASS" /><testcase id="audio_currentTime_value_later_end" purpose="Check if the audio.currentTime attribute return the end playback position it was set to later than the end of the media resource" result="PASS" /><testcase id="audio_currentTime_value_null" purpose="Check if the audio.currentTime attribute on getting it must return 0 it was set to null" result="PASS" /><testcase id="audio_defaultMuted_attribute_exists" purpose="Check if the audio.defaultMuted attribute exists" result="PASS" /><testcase id="audio_defaultMuted_attribute_initial" purpose="Check if audio.defaultMuted initial value is false" result="PASS" /><testcase id="audio_defaultMuted_attribute_type" purpose="Check if the type of audio.defaultMuted is boolean" result="PASS" /><testcase id="audio_defaultMuted_empty_string" purpose="Check if the value of the attribute audio.defaultMuted set empty string,then compare media.defaultMuted is false" result="PASS" /><testcase id="audio_defaultMuted_false_muted_absent" purpose="Check that audio.defaultMuted returns false if the muted attribute is absent in the audio element" result="PASS" /><testcase id="audio_defaultMuted_no_dynamic_effect" purpose="Check that audio.defaultMuted returns false if the muted attribute is set to true and the muted attribute is asent in the audio element" result="PASS" /><testcase id="audio_defaultMuted_no_dynamic_effect_muted" purpose="Check that media.defaultMuted returns true if the muted attribute is set to false and the muted attribute is present in the audio element" result="PASS" /><testcase id="audio_defaultMuted_null" purpose="Check if the value of the attribute audio.defaultMuted set null,then compare media.defaultMuted is false" result="PASS" /><testcase id="audio_defaultMuted_true_muted_present" purpose="Check that audio.defaultMuted returns true if the muted attribute is present in the audio element" result="PASS" /><testcase id="audio_defaultPlaybackRate_attribute_exists" purpose="Check if the audio.defaultPlaybackRate attribute exists" result="PASS" /><testcase id="audio_defaultPlaybackRate_attribute_type" purpose="Check if the type of audio.defaultPlaybackRate attribute is number" result="PASS" /><testcase id="audio_defaultPlaybackRate_basic" purpose="Check if the audio.defaultPlaybackRate attribute that on getting it must return 0.5 it was set to 0.5" result="PASS" /><testcase id="audio_defaultPlaybackRate_default_value" purpose="Check if the audio.defaultPlaybackRate attribute return 1.0 if it hasn't yet been set" result="PASS" /><testcase id="audio_defaultPlaybackRate_not_effect_by_controller" purpose="Check if audio.defaultPlaybackRate attributes have no effect when the media element has a current media controller" result="BLOCK" /><testcase id="audio_defaultPlaybackRate_value_null" purpose="Check if the audio.defaultPlaybackRate attribute that on getting it must return 0 it was set to null" result="PASS" /><testcase id="audio_defaultPlaybackRate_value_zero" purpose="Check if the audio.defaultPlaybackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="audio_duration_attribute_exists" purpose="Check if the audio.duration attribute exists" result="PASS" /><testcase id="audio_duration_attribute_readonly" purpose="Check if the audio.duration attribute is readonly" result="PASS" /><testcase id="audio_duration_attribute_type" purpose="Check if the type of audio.duration attribute is number" result="PASS" /><testcase id="audio_duration_attribute_value_NaN" purpose="Check if the audio.duration attribute return the Not-a-Number (NaN) value if no media data is available" result="PASS" /><testcase id="audio_duration_attribute_value_resource" purpose="Check if the audio.duration attribute return the time of the end of the media resource" result="PASS" /><testcase id="audio_element" purpose="Check if audio element returns same audio element twice" result="PASS" /><testcase id="audio_ended_attribute_exists" purpose="Check if audio.ended attribute exists" result="PASS" /><testcase id="audio_ended_attribute_readonly" purpose="Check if audio.ended is readonly" result="PASS" /><testcase id="audio_ended_attribute_type" purpose="Check if the type of audio.ended is boolean" result="PASS" /><testcase id="audio_ended_canplaythrough" purpose="Check if the attribute audio.ended should be false during canplaythrough event" result="PASS" /><testcase id="audio_ended_currentTime_duration" purpose="Check if the value of attribute audio.ended is true when set currentTime audio.durations" result="PASS" /><testcase id="audio_ended_default_value" purpose="Check if the default value of attribute audio.ended is false" result="PASS" /><testcase id="audio_ended_loaddata" purpose="Check if the value of attribute audio.ended is false during loadeddata event" result="PASS" /><testcase id="audio_ended_playing" purpose="Check if the value of attribute audio.ended is false during playing event" result="PASS" /><testcase id="audio_error_attribute_type" purpose="Check if the type of audio.error is object" result="PASS" /><testcase id="audio_error_MEDIA_ERR_SRC_NOT_SUPPORTED" purpose="Check if audio.error.code is MEDIA_ERR_SRC_NOT_SUPPORTED if the source not support" result="PASS" /><testcase id="audio_error_property_exists" purpose="Check if audio.error property exists" result="PASS" /><testcase id="audio_error_readonly" purpose="Check if the audio.error attribute is readonly" result="PASS" /><testcase id="audio_event_canplay" purpose="Check that  canplay event is triggered if autoplay attribute present and src attibute give right address of the media resource" result="PASS" /><testcase id="audio_event_canplaythrough" purpose="Check that canplaythrough event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_loadeddata" purpose="Check that loadedata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_loadedmetadata" purpose="Check that loadedmetadata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_loadstart" purpose="Check that loadstart event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_order_canplay_canplaythrough" purpose="Check that canplay event is triggered, then canplaythrough event triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_order_canplay_playing" purpose="Check that canplay event is triggered, then playing event triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_order_loadedmetadata_loadeddata" purpose="Check that loadedmetadata event is triggered, then loadeddata event triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_order_loadstart_progress" purpose="Check that loadstart event is triggered, then progress event triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_play" purpose="Check that play event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_playing" purpose="Check that playing event is triggered if autoplay attribute present and src attibute give right address of the media resource" result="PASS" /><testcase id="audio_event_progress" purpose="Check that progress event is triggered if autoplay attribute present and src attibute give right address of the media resource" result="PASS" /><testcase id="audio_HAVE_CURRENT_DATA_constant_exists" purpose="Check if the audio.HAVE_CURRENT_DATA exists" result="PASS" /><testcase id="audio_HAVE_CURRENT_DATA_constant_type" purpose="Check if the type of audio.HAVE_CURRENT_DATA is number" result="PASS" /><testcase id="audio_HAVE_CURRENT_DATA_constant_value" purpose="Check if the constant value of audio.HAVE_CURRENT_DATA is 2" result="PASS" /><testcase id="audio_HAVE_ENOUGH_DATA_constant_exists" purpose="Check if the audio.HAVE_ENOUGH_DATA exists" result="PASS" /><testcase id="audio_HAVE_ENOUGH_DATA_constant_type" purpose="Check if the type of audio.HAVE_ENOUGH_DATA is number" result="PASS" /><testcase id="audio_HAVE_ENOUGH_DATA_constant_value" purpose="Check if the constant value of audio.HAVE_ENOUGH_DATA is 4" result="PASS" /><testcase id="audio_HAVE_FUTURE_DATA_constant_exists" purpose="Check if the audio.HAVE_FUTURE_DATA exists" result="PASS" /><testcase id="audio_HAVE_FUTURE_DATA_constant_type" purpose="Check if the type of audio.HAVE_FUTURE_DATA is number" result="PASS" /><testcase id="audio_HAVE_FUTURE_DATA_constant_value" purpose="Check if the constant value of audio.HAVE_FUTURE_DATA is 3" result="PASS" /><testcase id="audio_HAVE_METADATA_constant_exists" purpose="Check if the audio.HAVE_METADATA exists" result="PASS" /><testcase id="audio_HAVE_METADATA_constant_type" purpose="Check if the type of audio.HAVE_METADATA is number" result="PASS" /><testcase id="audio_HAVE_METADATA_constant_value" purpose="Check if the constant value of audio.HAVE_METADATA is 1" result="PASS" /><testcase id="audio_HAVE_NOTHING_constant_exists" purpose="Check if the audio.HAVE_NOTHING exists" result="PASS" /><testcase id="audio_HAVE_NOTHING_constant_type" purpose="Check if the type of audio.HAVE_NOTHING is number" result="PASS" /><testcase id="audio_HAVE_NOTHING_constant_value" purpose="Check if the constant value of audio.HAVE_NOTHING is 0" result="PASS" /><testcase id="audio_load_method" purpose="Check if audio.load can start selecting and loading a new media resource from scratch" result="PASS" /><testcase id="audio_load_method_exists" purpose="Check if the audio.load exists" result="PASS" /><testcase id="audio_load_method_type" purpose="Check if the type of audio.load is 'function'" result="PASS" /><testcase id="audio_loop_attribute_exists" purpose="Check if audio.loop attribute exists" result="PASS" /><testcase id="audio_loop_attribute_initial" purpose="Check if audio.loop initial value is false" result="PASS" /><testcase id="audio_loop_attribute_type" purpose="Check if the type of audio.loop is boolean" result="PASS" /><testcase id="audio_loop_base" purpose="Check that seeking event is triggered more than once if audio.loop is set to true" result="PASS" /><testcase id="audio_loop_current_media_controller" purpose="Check if the audio element has a current media controller that expecting the loop attribute has no effect" result="FAIL" /><testcase id="audio_loop_empty_string" purpose="Check if the value of the attribute audio.loop is false if set it empty string" result="PASS" /><testcase id="audio_loop_false_loop_absent" purpose="Check if audio.loop returns false when the loop attribute is absent in the audio element" result="PASS" /><testcase id="audio_loop_no_effect_by_controller" purpose="Checks that expecting the loop attribute has no effect, when the audio element has a current media controller" result="BLOCK" /><testcase id="audio_loop_null" purpose="Check if the value of the attribute audio.loop is false if set it null" result="PASS" /><testcase id="audio_loop_reflects_false" purpose="Check if audio.loop can be set to false" result="PASS" /><testcase id="audio_loop_reflects_true" purpose="Check if audio.loop can be set to true" result="PASS" /><testcase id="audio_loop_true_loop_present" purpose="Check that audio.loop returns true if the loop attribute is present in the audio element" result="PASS" /><testcase id="audio_MediaController_buffered_exists" purpose="Check if audio.MediaController.buffered exists" result="FAIL" /><testcase id="audio_MediaController_buffered_readonly" purpose="Check if audio.MediaController.buffered is readonly" result="FAIL" /><testcase id="audio_MediaController_buffered_type" purpose="Check if audio.MediaController.buffered is of type object" result="FAIL" /><testcase id="audio_MediaController_currentTime_exists" purpose="Check if audio.MediaController.currentTime exists" result="FAIL" /><testcase id="audio_MediaController_currentTime_type" purpose="Check if audio.MediaController.currentTime is of type number" result="FAIL" /><testcase id="audio_MediaController_defaultPlaybackRate_exists" purpose="Check if audio.MediaController.defaultPlaybackRate exists" result="FAIL" /><testcase id="audio_MediaController_defaultPlaybackRate_type" purpose="Check if audio.MediaController.defaultPlaybackRate is of type number" result="FAIL" /><testcase id="audio_MediaController_duration_exists" purpose="Check if audio.MediaController.duration exists" result="FAIL" /><testcase id="audio_MediaController_duration_readonly" purpose="Check if audio.MediaController.duration is readonly" result="FAIL" /><testcase id="audio_MediaController_duration_type" purpose="Check if audio.MediaController.duration is of type number" result="FAIL" /><testcase id="audio_MediaController_ended" purpose="Check if audio.controller.onended event occurs" result="BLOCK" /><testcase id="audio_MediaController_muted_exists" purpose="Check if audio.MediaController.muted exists" result="FAIL" /><testcase id="audio_MediaController_muted_type" purpose="Check if audio.MediaController.muted is of type boolean" result="FAIL" /><testcase id="audio_MediaController_oncanplaythrough_event" purpose="Check if audio.controller.canplaythrough event occurs" result="BLOCK" /><testcase id="audio_MediaController_oncanplay_event" purpose="Check if audio.controller.canplay event occurs" result="BLOCK" /><testcase id="audio_MediaController_onemptied_event" purpose="Check if audio.controller.emptied event occurs" result="BLOCK" /><testcase id="audio_MediaController_onloadeddata_event" purpose="Check if audio.controller.loadeddata event occurs" result="BLOCK" /><testcase id="audio_MediaController_onloadedmetadata_event" purpose="Check if audio.controller.loadedmetadata event occurs" result="BLOCK" /><testcase id="audio_MediaController_onpause_event" purpose="Check if audio.controller.pause event occurs" result="BLOCK" /><testcase id="audio_MediaController_onplaying_event" purpose="Check if audio.controller.playing event occurs" result="BLOCK" /><testcase id="audio_MediaController_onplay_event" purpose="Check if audio.controller.play event occurs" result="BLOCK" /><testcase id="audio_MediaController_onratechange_event" purpose="Check if audio.controller.ratechange event occurs" result="BLOCK" /><testcase id="audio_MediaController_onvolumechange_event" purpose="Check if audio.controller.volumechange event occurs" result="BLOCK" /><testcase id="audio_MediaController_onwaiting_event" purpose="Check if audio.controller.waiting event occurs" result="BLOCK" /><testcase id="audio_MediaController_paused_exists" purpose="Check if audio.MediaController.paused exists" result="FAIL" /><testcase id="audio_MediaController_paused_readonly" purpose="Check if audio.MediaController.paused is readonly" result="FAIL" /><testcase id="audio_MediaController_paused_type" purpose="Check if audio.MediaController.paused is of type boolean" result="FAIL" /><testcase id="audio_MediaController_pause_exists" purpose="Check if audio.MediaController.pause exists" result="FAIL" /><testcase id="audio_MediaController_pause_type" purpose="Check if audio.MediaController.pause is of type function" result="FAIL" /><testcase id="audio_MediaController_playbackRate_exists" purpose="Check if audio.MediaController.playbackRate exists" result="FAIL" /><testcase id="audio_MediaController_playbackRate_type" purpose="Check if audio.MediaController.playbackRate is of type number" result="FAIL" /><testcase id="audio_MediaController_playbackState_ended" purpose="Check if audio.MediaController.playbackState attribute is ended" result="BLOCK" /><testcase id="audio_MediaController_playbackState_exists" purpose="Check if audio.MediaController.playbackState attribute exists" result="FAIL" /><testcase id="audio_MediaController_playbackState_playing" purpose="Check if audio.MediaController.playbackState attribute is playing" result="BLOCK" /><testcase id="audio_MediaController_playbackState_readonly" purpose="Check if audio.MediaController.playbackState attribute is readonly" result="FAIL" /><testcase id="audio_MediaController_playbackState_type" purpose="Check if the type of audio.MediaController.playbackState attribute is string" result="FAIL" /><testcase id="audio_MediaController_playbackState_waiting" purpose="Check if audio.MediaController.playbackState attribute is waiting" result="FAIL" /><testcase id="audio_MediaController_played_exists" purpose="Check if audio.MediaController.played exists" result="FAIL" /><testcase id="audio_MediaController_played_readonly" purpose="Check if audio.MediaController.played is readonly" result="FAIL" /><testcase id="audio_MediaController_played_type" purpose="Check if audio.MediaController.played is of type number" result="FAIL" /><testcase id="audio_MediaController_play_exists" purpose="Check if audio.MediaController.play exists" result="FAIL" /><testcase id="audio_MediaController_play_type" purpose="Check if audio.MediaController.play is of type function" result="FAIL" /><testcase id="audio_MediaController_seekable_exists" purpose="Check if audio.MediaController.seekable exists" result="FAIL" /><testcase id="audio_MediaController_seekable_readonly" purpose="Check if audio.MediaController.seekable is readonly" result="FAIL" /><testcase id="audio_MediaController_seekable_type" purpose="Check if audio.MediaController.seekable is of type object" result="FAIL" /><testcase id="audio_MediaController_unpause_base" purpose="Check if audio.MediaController.unpause method, calling unpause method paused false callback play event" result="BLOCK" /><testcase id="audio_MediaController_unpause_exists" purpose="Check if audio.MediaController.unpause method exists" result="FAIL" /><testcase id="audio_MediaController_unpause_type" purpose="Check if the type of audio.MediaController.unpause method is function" result="FAIL" /><testcase id="audio_MediaController_volume_exists" purpose="Check if audio.MediaController.volume exists" result="FAIL" /><testcase id="audio_MediaController_volume_type" purpose="Check if audio.MediaController.volume is of type number" result="FAIL" /><testcase id="audio_MediaError_code_exists" purpose="Check if audio.error.code exists" result="PASS" /><testcase id="audio_MediaError_code_readonly" purpose="Check if audio.error.code is readonly" result="PASS" /><testcase id="audio_MediaError_code_type" purpose="Check if the type of audio.error.code is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_ABORTED_constant_exists" purpose="Check if audio.error.MEDIA_ERR_ABORTED exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_ABORTED_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_ABORTED is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_ABORTED_constant_value" purpose="Check if audio.error.MEDIA_ERR_ABORTED const value is 1" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_DECODE_constant_exists" purpose="Check if audio.error.MEDIA_ERR_DECODE exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_DECODE_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_DECODE is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_DECODE_constant_value" purpose="Check if audio.error.MEDIA_ERR_DECODE const value is 3" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_NETWORK_constant_exists" purpose="Check if audio.error.MEDIA_ERR_NETWORK exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_NETWORK_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_NETWORK is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_NETWORK_constant_value" purpose="Check if audio.error.MEDIA_ERR_NETWORK const value is 2" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_exists" purpose="Check if audio.error.MEDIA_ERR_SRC_NOT_SUPPORTED exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_SRC_NOT_SUPPORTED is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_value" purpose="Check if audio.error.MEDIA_ERR_SRC_NOT_SUPPORTED const value is 4" result="PASS" /><testcase id="audio_mediaGroup_attribute_exists" purpose="Check if audio.mediaGroup exists" result="FAIL" /><testcase id="audio_mediaGroup_attribute_type" purpose="Check if the type of audio.mediagroup is string" result="FAIL" /><testcase id="audio_mediaGroup_empty_string" purpose="Check if the value of attribute of audio.mediaGroup is empty string when you set it empty string" result="PASS" /><testcase id="audio_mediaGroup_null" purpose="Check if the value of attribute audio.mediaGroup is empty string when set it null" result="FAIL" /><testcase id="audio_mediaGroup_valid_value" purpose="Check if the value of audio.mediaGroup is valid" result="PASS" /><testcase id="audio_muted_attribute_exists" purpose="Check if audio.muted exists" result="PASS" /><testcase id="audio_muted_attribute_initial" purpose="Check if audio.muted initial value is false" result="PASS" /><testcase id="audio_muted_attribute_type" purpose="Check if the type of audio.muted is boolean" result="PASS" /><testcase id="audio_muted_false_muted_absent" purpose="Check if audio.muted returns false when the muted attribute is absent in the audio element" result="PASS" /><testcase id="audio_muted_innerHTML_get" purpose="Check that audio.muted can be get with muted='' (innerHTML-created)" result="FAIL" /><testcase id="audio_muted_notpresent_get" purpose="Check that audio.muted returns false if the muted attribute is not present in the audio element" result="PASS" /><testcase id="audio_muted_notpresent_set" purpose="Check if the audio.muted can be set if the muted attribute is not present in the audio element" result="PASS" /><testcase id="audio_muted_overriding_volume" purpose="Check that the sound can not be output when the muted attribute is provided for the audio element although volume is set to loudest." result="PASS" /><testcase id="audio_muted_present_get" purpose="Check that audio.muted returns true if the muted attribute is present in the audio element" result="FAIL" /><testcase id="audio_muted_present_manual" purpose="Check that the sound can not be output when the muted attribute is provided for the audio element." result="PASS" /><testcase id="audio_muted_present_set" purpose="Check if the audio.muted can be set if the muted attribute is present in the audio element" result="FAIL" /><testcase id="audio_muted_script_get1" purpose="Check that audio.muted can be get (script-created)" result="PASS" /><testcase id="audio_muted_script_get2" purpose="Check that audio.muted can be get with muted='' (script-created)" result="PASS" /><testcase id="audio_muted_script_set1" purpose="Check that audio.muted can be set (script-created)" result="PASS" /><testcase id="audio_muted_script_set2" purpose="Check that audio.muted can be set with muted='' (script-created)" result="PASS" /><testcase id="audio_muted_volumechange" purpose="Check that volumechange event is triggered if audio.muted is changed" result="PASS" /><testcase id="audio_muted_write_get" purpose="Check that audio.muted can be get with muted='' (document.write-created)" result="FAIL" /><testcase id="audio_networkState_attribute_type" purpose="Check if the type of audio.networkState is number" result="PASS" /><testcase id="audio_networkstate_initial" purpose="Check that audio.networkState is NETWORK_EMPTY" result="PASS" /><testcase id="audio_networkState_NETWORK_LOADING" purpose="Check if audio.networkState is NETWORK_LOADING when the user agent is actively trying to download data" result="PASS" /><testcase id="audio_networkState_NETWORK_NO_SOURCE" purpose="Check if audio.networkState is NETWORK_NO_SOURCE when not yet found a resource to use" result="PASS" /><testcase id="audio_networkstate_property_exists" purpose="Check that audio.networkState property exists" result="PASS" /><testcase id="audio_networkState_readonly" purpose="Check if the audio.networkState attribute is readonly" result="PASS" /><testcase id="audio_NETWORK_EMPTY_constant_exists" purpose="Check if the audio.NETWORK_EMPTY exists" result="PASS" /><testcase id="audio_NETWORK_EMPTY_constant_type" purpose="Check if the type of audio.NETWORK_EMPTY is number" result="PASS" /><testcase id="audio_NETWORK_EMPTY_constant_value" purpose="Check if audio.NETWORK_EMPTY const value is 0" result="PASS" /><testcase id="audio_NETWORK_IDLE_constant_exists" purpose="Check if the audio.NETWORK_IDLE exists" result="PASS" /><testcase id="audio_NETWORK_IDLE_constant_type" purpose="Check if the type of audio.NETWORK_IDLE is number" result="PASS" /><testcase id="audio_NETWORK_IDLE_constant_value" purpose="Check if audio.NETWORK_IDLE const value is 1" result="PASS" /><testcase id="audio_NETWORK_LOADING_constant_exists" purpose="Check if the audio.NETWORK_LOADING exists" result="PASS" /><testcase id="audio_NETWORK_LOADING_constant_type" purpose="Check if the type of audio.NETWORK_LOADING is number" result="PASS" /><testcase id="audio_NETWORK_LOADING_constant_value" purpose="Check if audio.NETWORK_LOADING const value is 2" result="PASS" /><testcase id="audio_NETWORK_NO_SOURCE_constant_exists" purpose="Check if the audio.NETWORK_NO_SOURCE exists" result="PASS" /><testcase id="audio_NETWORK_NO_SOURCE_constant_type" purpose="Check if the type of audio.NETWORK_NO_SOURCE is number" result="PASS" /><testcase id="audio_NETWORK_NO_SOURCE_constant_value" purpose="Check if audio.NETWORK_NO_SOURCE const value is 3" result="PASS" /><testcase id="audio_ondurationchange_event" purpose="Check if the event audio.ondurationchange occurs" result="PASS" /><testcase id="audio_onemptied_event" purpose="Check if the event audio.onemptied occurs" result="PASS" /><testcase id="audio_onended_event" purpose="Check if the event audio.onended occurs when media resource is end" result="PASS" /><testcase id="audio_onerror_event" purpose="Check if the event audio.onerror occurs" result="PASS" /><testcase id="audio_one_inside_image_not_show" purpose="Check that image content inside the audio element can not be shown." result="PASS" /><testcase id="audio_onpause_event" purpose="Check if the event audio.onpause occurs" result="PASS" /><testcase id="audio_onratechange_event_defaultPlaybackRate" purpose="Check if the event audio.onratechange occurs when defaultPlaybackRate changed" result="PASS" /><testcase id="audio_onratechange_event_playbackRate" purpose="Check if the event audio.onratechange occurs when playbackRate changed" result="PASS" /><testcase id="audio_onseeking_event" purpose="Check if the event audio.onseeking occurs" result="PASS" /><testcase id="audio_ontimeupdate_event" purpose="Check if the event audio.ontimeupdate occurs" result="PASS" /><testcase id="audio_onvolumechange_event_muted" purpose="Check if the event audio.onvolumechange occurs when muted changed" result="PASS" /><testcase id="audio_onvolumechange_event_volume" purpose="Check if the event audio.onvolumechange occurs when volume changed" result="PASS" /><testcase id="audio_onwaiting_event" purpose="Check if the event audio.onwaiting occurs" result="PASS" /><testcase id="audio_paused_attribute_default_value" purpose="Check if the audio.paused attribute must initially be true" result="PASS" /><testcase id="audio_paused_attribute_exists" purpose="Check if the audio.paused attribute exists" result="PASS" /><testcase id="audio_paused_attribute_readonly" purpose="Check if the audio.paused attribute is readonly" result="PASS" /><testcase id="audio_paused_attribute_type" purpose="Check if the type of audio.paused attribute is boolean" result="PASS" /><testcase id="audio_paused_false_during_play" purpose="Check that audio.paused is false if play event is triggered" result="PASS" /><testcase id="audio_paused_true_during_pause" purpose="Check that audio.paused is true if pause event is triggered" result="PASS" /><testcase id="audio_pause_aac" purpose="Check if the audio element can pause the AAC decoding format and the container format is aac" result="PASS" /><testcase id="audio_pause_amr" purpose="Check if the audio element can pause the AMR-NB decoding format audio file" result="BLOCK" /><testcase id="audio_pause_method_exists" purpose="Check if audio.pause method exists" result="PASS" /><testcase id="audio_pause_method_type" purpose="Check if audio.pause is of type function" result="PASS" /><testcase id="audio_pause_mp3" purpose="Check if the audio element can pause the MP3 decoding format audio file" result="PASS" /><testcase id="audio_pause_mp4_aac" purpose="Check if the audio element can pause the AAC decoding format audio file" result="PASS" /><testcase id="audio_pause_ogg_vorbis" purpose="Check if user agent is able to pause playing audio playback for stream ogg vorbis" result="PASS" /><testcase id="audio_pause_wav_pcm" purpose="Check if user agent is able to pause playing audio playback for stream wav pcm" result="PASS" /><testcase id="audio_pause_webm_vorbis" purpose="Check if user agent is able to pause playing audio playback for stream webm vorbis" result="PASS" /><testcase id="audio_playbackRate_attribute_exists" purpose="Check if the audio.playbackRate attribute exists" result="PASS" /><testcase id="audio_playbackRate_attribute_type" purpose="Check if the type of audio.playbackRate attribute is number" result="PASS" /><testcase id="audio_playbackRate_basic" purpose="Check if the audio.playbackRate attribute that on getting it must return 4.0 it was set to 4.0" result="PASS" /><testcase id="audio_playbackRate_default_value" purpose="Check if the audio.playbackRate attribute value is 1.0 if it hasn't yet been set" result="PASS" /><testcase id="audio_playbackRate_not_effect_by_controller" purpose="Check if audio.playbackRate attributes have no effect when the media element has a current media controller" result="BLOCK" /><testcase id="audio_playbackRate_value_null" purpose="Check if the audio.playbackRate attribute return 0 it was set to null" result="PASS" /><testcase id="audio_playbackRate_value_zero" purpose="Check if the audio.playbackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="audio_played_attribute_exists" purpose="Check if the type of audio.played attribute is [object TimeRanges]" result="PASS" /><testcase id="audio_played_attribute_readonly" purpose="Check if audio.played attribute is readonly" result="PASS" /><testcase id="audio_played_attribute_type" purpose="Check if the type of attribute audio.played is object" result="PASS" /><testcase id="audio_played_length_default_value" purpose="Check if default value of the attribute audio.played.length is 0" result="PASS" /><testcase id="audio_play_aac" purpose="Check if the audio element can play the AAC decoding format and the container format is aac" result="PASS" /><testcase id="audio_play_amr" purpose="Check if the audio element can play the AMR-NB decoding format audio file" result="BLOCK" /><testcase id="audio_play_method_exists" purpose="Check if audio.play method exists" result="PASS" /><testcase id="audio_play_method_type" purpose="Check if audio.play method is of type function" result="PASS" /><testcase id="audio_play_mp3" purpose="Check if the audio element can play the MP3 decoding format audio file" result="PASS" /><testcase id="audio_play_mp4_aac" purpose="Check if the audio element can play the AAC decoding format audio file" result="PASS" /><testcase id="audio_play_ogg_vorbis" purpose="Check if user agent is able to play audio stream ogg theora vorbis with event ended fired when ended playback" result="PASS" /><testcase id="audio_play_webm_vorbis" purpose="Check if user agent is able to play audio stream webm vorbis with event ended fired when ended playback" result="PASS" /><testcase id="audio_preload_attribute_type" purpose="Check if the type of audio.preload is string" result="PASS" /><testcase id="audio_preload_auto" purpose="Check if audio.preload can be set to 'auto'" result="PASS" /><testcase id="audio_preload_property_exists" purpose="Check if audio.preload property exists" result="PASS" /><testcase id="audio_preload_reflects_auto_value" purpose="Check that audio.preload reflects 'auto' value" result="PASS" /><testcase id="audio_preload_reflects_metadata" purpose="Check that audio.preload reflects 'metadata' value" result="PASS" /><testcase id="audio_preload_reflects_none" purpose="Check that audio.preload reflects 'none' value" result="PASS" /><testcase id="audio_preload_reflects_none_autoplay" purpose="Check that audio.preload reflects 'none' value even if autoplay attribute is present" result="PASS" /><testcase id="audio_readyState_attribute_type" purpose="Check if the type of audio.readyState attribute is number" result="PASS" /><testcase id="audio_readystate_property_exists" purpose="Check if the audio.readyState property exists" result="PASS" /><testcase id="audio_resume_ogg_vorbis" purpose="Check if user agent is able to resume paused audio playback for stream ogg vorbis" result="PASS" /><testcase id="audio_resume_webm_vorbis" purpose="Check if user agent is able to resume paused audio playback for stream webm vorbis" result="PASS" /><testcase id="audio_seekable_attribute_exists" purpose="Check if attribute audio.seekable attribute exists" result="PASS" /><testcase id="audio_seekable_attribute_readonly" purpose="Check if audio.seekable attribute is readonly" result="PASS" /><testcase id="audio_seekable_attribute_type" purpose="Check if the type of audio.seekable attribute is boolean" result="PASS" /><testcase id="audio_seekable_length_default_value" purpose="Check if the default value of attribute audio.seekable.length is 0" result="PASS" /><testcase id="audio_seeking_attribute_exists" purpose="Check if the audio.seeking attribute exists" result="PASS" /><testcase id="audio_seeking_attribute_readonly" purpose="Check if the audio.seeking attribute is readonly" result="PASS" /><testcase id="audio_seeking_attribute_type" purpose="Check if the type of audio.seeking attribute is boolean" result="PASS" /><testcase id="audio_seeking_default_value" purpose="Check if the audio.seeking attribute must initially have the value false" result="PASS" /><testcase id="audio_seeking_value_true" purpose="Check if the audio.seeking attribute returns true if the user agent is currently seeking" result="PASS" /><testcase id="audio_seek_ogg_vorbis" purpose="Check if user agent is able to seek audio playback with currentTime attribute for stream ogg vorbis" result="PASS" /><testcase id="audio_seek_webm_vorbis" purpose="Check if user agent is able to seek audio playback with currentTime attribute for stream webm vorbis" result="PASS" /><testcase id="audio_src_attribute_exists" purpose="Check if audio.src exists" result="PASS" /><testcase id="audio_src_attribute_type" purpose="Check if the type of audio.src is string" result="PASS" /><testcase id="audio_src_basic" purpose="Check if audio.src can get src attibute value" result="PASS" /><testcase id="audio_src_changed_trigger_loadstart" purpose="Check if a audio.src attribute of a media element is set or changed, the user agent must invoke the media element's media element load algorithm" result="PASS" /><testcase id="audio_src_default_value" purpose="Check if the default value of audio.src is a empty string" result="PASS" /><testcase id="audio_src_modify" purpose="Check if audio.src can be modified" result="PASS" /><testcase id="audio_src_null" purpose="Check if audio.src return empty string when you set it null" result="FAIL" /><testcase id="audio_src_reflects_no_value" purpose="Check that audio.src is empty if there is no source" result="PASS" /><testcase id="audio_src_removal_does_not_trigger_loadstart" purpose="Check that removing audio.src attribute tiggers loadstart event" result="PASS" /><testcase id="audio_stop_ogg_vorbis" purpose="Check if user agent is able to stop audio playback for stream ogg vorbis" result="PASS" /><testcase id="audio_stop_wav_pcm" purpose="Check if user agent is able to stop audio playback for stream wav pcm" result="PASS" /><testcase id="audio_stop_webm_vorbis" purpose="Check if user agent is able to stop audio playback for stream webm vorbis" result="PASS" /><testcase id="audio_TimeRanges_end_exists" purpose="Check if audio.TimeRanges.end exists" result="PASS" /><testcase id="audio_TimeRanges_end_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the audio.TimeRanges.end method index is out of range" result="PASS" /><testcase id="audio_TimeRanges_length_exists" purpose="Check if audio.TimeRanges.length exists" result="PASS" /><testcase id="audio_TimeRanges_length_readonly" purpose="Check if audio.TimeRanges.length is readonly" result="PASS" /><testcase id="audio_TimeRanges_length_type" purpose="Check if audio.TimeRanges.length is of type number" result="PASS" /><testcase id="audio_TimeRanges_start_exists" purpose="Check if audio.TimeRanges.start exists" result="PASS" /><testcase id="audio_TimeRanges_start_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the audio.TimeRanges.start method index is out of range" result="PASS" /><testcase id="audio_two_inside_color_not_show" purpose="Check that color content inside the audio element can not be shown" result="PASS" /><testcase id="audio_volume_attribute_exists" purpose="Check if audio.volume attribute exists" result="PASS" /><testcase id="audio_volume_attribute_type" purpose="Check if the type of audio.volume attribute is number" result="PASS" /><testcase id="audio_volume_exception_lower" purpose="Check that user agent is able to get an INDEX_SIZE_ERR exception if set audio.volume with new value less than 0.0" result="PASS" /><testcase id="audio_volume_exception_upper" purpose="Check that user agent is able to get an INDEX_SIZE_ERR exception if set audio.volume with new value more than 1.0" result="PASS" /><testcase id="audio_volume_initial" purpose="Check if the intial value of the audio.volume is in the range 0.0 to 1.0 inclusive" result="PASS" /><testcase id="audio_volume_loudest" purpose="Check if user agent is able to set audio.volume with new value 1.0" result="PASS" /><testcase id="audio_volume_loudest_manual" purpose="Check that the volume is loudest when the attribute is set to 1.0 for the audio element." result="PASS" /><testcase id="audio_volume_normal" purpose="Check if user agent is able to set audio.volume with new value in the range 0.0 to 1.0 inclusive" result="PASS" /><testcase id="audio_volume_silent" purpose="Check if user agent is able to set audio.volume with new value 0.0" result="PASS" /><testcase id="audio_volume_silent_manual" purpose="Check that the volume is lowest (silent) when the attribute is set to 0.0." result="PASS" /><testcase id="audio_volume_volumechange" purpose="Check that volumechange event is triggered if audio.volume is changed" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_mp4a" purpose="Check that audio.canPlayType method support mp4 format" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_vorbis" purpose="Check that audio.canPlayType method support vorbis format" result="PASS" /><testcase id="content_audio_readystate_during_canplay" purpose="Check that audio.readyState is greater than or equal to HAVE_FUTURE_DATA if canplay event is triggered" result="PASS" /><testcase id="content_audio_readystate_during_canplaythrough" purpose="Check that audio.readyState is HAVE_ENOUGH_DATA if canplaythrough event is triggered" result="PASS" /><testcase id="content_audio_readystate_during_loadeddata" purpose="Check that audio.readyState is greater than or equal to HAVE_CURRENT_DATA if loadeddata event is triggered" result="PASS" /><testcase id="content_audio_readystate_during_loadedmetadata" purpose="Check that audio.readyState is greater than or equal to HAVE_METADATA_DATA if loadedMETAdata event is triggered" result="PASS" /><testcase id="content_audio_readystate_during_playing" purpose="Check that audio.readyState is greater than or equal to HAVE_FUTURE_DATA if playing event is triggered" result="PASS" /><testcase id="content_audio_readystate_initial" purpose="Check that audio.readyState initial value is HAVE_NOTHING" result="PASS" /><testcase id="content_audio_src_reflects_attribute_not_source_elements" purpose="Check that audio.src reflects the content attribute of the same name" result="PASS" /><testcase id="error_null_no_source" purpose="Check that the property of audio.error is null if no source" result="PASS" /></category><category name="W3C_HTML5 APIs/Media/HTML5 The video element"><testcase id="canplaytype_application_octet_stream_with_codecs_avc_mp4a" purpose="Check if the video.canPlayType supports application/octet-stream with codecs='avc1.42E01E, mp4a.40.2'" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_theora_vorbis" purpose="Check if the video.canPlayType supports application/octet-stream with codecs='theora, vorbis'" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_vp8_vorbis" purpose="Check if video.canPlayType supports application/octet-stream with codecs='vp8, vorbis'" result="PASS" /><testcase id="canplaytype_codecs_order_avc_mp4a" purpose="Check if the video.canPlayType supports video/webm after ordered the codecs's parameter(avc1.42E01E, mp4a.40.2)" result="PASS" /><testcase id="canplaytype_codecs_order_theora_vorbis" purpose="Check if the video.canPlayType supports video/webm after ordered the codecs's parameter(theora, vorbis)" result="PASS" /><testcase id="canplaytype_codecs_order_vp8_vorbis" purpose="Check if the video.canPlayType supports video/webm after ordered the codecs's parameter(vp8, vorbis)" result="PASS" /><testcase id="canplaytype_two_codecs_theora_vorbis_implies_one_theora" purpose="Check if the video.canPlayType has ability to play two codecs(theora, vorbis) implies the ability to play one(theora)" result="PASS" /><testcase id="canplaytype_two_codecs_theora_vorbis_implies_one_vorbis" purpose="Check if the video.canPlayType has ability to play two codecs(theora, vorbis) implies the ability to play one(vorbis)" result="PASS" /><testcase id="canplaytype_two_codecs_vp8_vorbis_implies_one_vorbis" purpose="Check if the video.canPlayType has ability to play two codecs(vp8, vorbis) implies the ability to play one(vorbis)" result="PASS" /><testcase id="canplaytype_two_codecs_vp8_vorbis_implies_one_vp8" purpose="Check if the video.canPlayType has ability to play two codecs(vp8, vorbis) implies the ability to play one(vp8)" result="PASS" /><testcase id="canplaytype_webm_supported_but_no_codecs_parameter" purpose="Check if the video.canPlayType supports video webm" result="PASS" /><testcase id="error_null" purpose="Check that the video.error return null if there is no source" result="PASS" /><testcase id="video_000" purpose="Check that a video loads but is not playing, since the default state is paused" result="PASS" /><testcase id="video_011" purpose="The 'src' IDL attribute of media elements reflects the content attribute (relative URI)" result="PASS" /><testcase id="video_addTextTrack_captions" purpose="Check if the video.addTextTrack invoked successfully when the first arg is captions" result="PASS" /><testcase id="video_addTextTrack_chapters" purpose="Check if the video.addTextTrack invoked successfully when the first arg is chapters" result="PASS" /><testcase id="video_addTextTrack_descriptions" purpose="Check if the video.addTextTrack invoked successfully when the first arg is descriptions" result="PASS" /><testcase id="video_addTextTrack_exist" purpose="Check if the vedio.addTextTrack method exists" result="PASS" /><testcase id="video_addTextTrack_metadata" purpose="Check if the video.addTextTrack invoked successfully when the first arg is metadata" result="PASS" /><testcase id="video_addTextTrack_subtitles" purpose="Check if the video.addTextTrack invoked successfully when the first arg is subtitles" result="PASS" /><testcase id="video_addTextTrack_three_argument" purpose="Check if the video.addTextTrack invoked successfully when it has three argument" result="PASS" /><testcase id="video_addTextTrack_two_argument" purpose="Check if the video.addTextTrack invoked successfully when the third arg is ommited" result="PASS" /><testcase id="video_addTextTrack_type" purpose="Check if the vedio.addTextTrack attribute is of type function" result="PASS" /><testcase id="video_autoplay_attribute_exists" purpose="Check if the video.autoplay attritbute exists" result="PASS" /><testcase id="video_autoplay_attribute_type" purpose="Check if the type of video.autoplay attribute is boolean" result="PASS" /><testcase id="video_autoplay_default_value" purpose="Check if the video.autoplay attribute default is false" result="PASS" /><testcase id="video_autoplay_empty_string" purpose="Check if the attribute video.autoplay is false when set it empty string" result="PASS" /><testcase id="video_autoplay_null" purpose="Check if the value of attribute of video.autoplay is false when you set it null" result="PASS" /><testcase id="video_autoplay_onloadedmetadata" purpose="Check if video.autoplay attribute invoked,then video.onloadedmetadata() function triggered" result="PASS" /><testcase id="video_autoplay_true_autoplay_present" purpose="Check if video.autoplay returns true when the controls attribute is present in the video element" result="PASS" /><testcase id="video_buffered_end_type" purpose="Check if the type of video.buffered.end is function" result="PASS" /><testcase id="video_buffered_exists" purpose="Check if the video.buffered attribute exists" result="PASS" /><testcase id="video_buffered_length_default_value" purpose="Check if the video.buffered length is zero,typically this will be a single range anchored at the zero point" result="PASS" /><testcase id="video_buffered_readonly" purpose="Check if the video.buffered attribute is readonly" result="PASS" /><testcase id="video_buffered_start_type" purpose="Check if the type of video.buffered.start is function" result="PASS" /><testcase id="video_buffered_type" purpose="Check if the type of video.buffered is a TimeRanges object" result="PASS" /><testcase id="video_canplaytype_application_octet_stream" purpose="Check if the video.canPlayType supports application/octet-stream" result="PASS" /><testcase id="video_canplaytype_bogus_type" purpose="Check if the video.canPlayType supports bogus type" result="PASS" /><testcase id="video_canPlayType_codecs_mp4-avc" purpose="Check if the video.canPlayType supports video/mp4 of codecs's parameter(avc1.42E01E)" result="PASS" /><testcase id="video_canPlayType_codecs_mp4-avc-mp4a" purpose="Check if the video.canPlayType supports video/mp4 of codecs's parameter(avc1.42E01E, mp4a.40.2)" result="PASS" /><testcase id="video_canPlayType_codecs_mp4-avc-mp4v" purpose="Check if the video.canPlayType supports video/mp4 of codecs's parameter(avc1.42E01E, mp4a.40)" result="PASS" /><testcase id="video_canPlayType_empty_string" purpose="Check if video.canPlayType return empty string if arguments is a empty string" result="PASS" /><testcase id="video_canplaytype_method_exists" purpose="Check if the video.canPlayType supports existence of canPlayType method" result="PASS" /><testcase id="video_canPlayType_method_type" purpose="Check if the type of video.canPlayType is 'function'" result="PASS" /><testcase id="video_canplaytype_mp4_supported_but_no_codecs_parameter" purpose="Check if the video.canPlayType supports video mp4" result="PASS" /><testcase id="video_canPlayType_null" purpose="Check if video.canPlayType return empty string if arguments is null" result="PASS" /><testcase id="video_canplaytype_ogg_supported_but_no_codecs_parameter" purpose="Check if the video.canPlayType supports video ogg" result="PASS" /><testcase id="video_controller_attribute_exists" purpose="Check if the video.controller attribute exists" result="FAIL" /><testcase id="video_controller_attribute_type" purpose="Check if the type of video.controller is object" result="FAIL" /><testcase id="video_controller_default_value" purpose="Check if the defaut value of video.controller is null" result="FAIL" /><testcase id="video_controller_MediaControllerl" purpose="Check if the attribute video.controller is not null when set it an object MediaController" result="FAIL" /><testcase id="video_controls_attribute_exists" purpose="Check if the video.controls attribute exists" result="PASS" /><testcase id="video_controls_attribute_type" purpose="Check if the type of video.controls is boolean" result="PASS" /><testcase id="video_controls_empty_string" purpose="Check if the value of attribute video.controls is false when set it empty string" result="PASS" /><testcase id="video_controls_false_controls_absent" purpose="Check if video.controls returns false when the controls attribute is absent in the video element" result="PASS" /><testcase id="video_controls_null" purpose="Check if the value of attribute video.controls is false when set it null" result="PASS" /><testcase id="video_controls_present_manual" purpose="Check if the controls attribute is present in the video element that expecting the user agent exposes a controller user interface" result="FAIL" /><testcase id="video_controls_reflects_false" purpose="Check if the video.controls can be set to false" result="PASS" /><testcase id="video_controls_reflects_true" purpose="Check if the video.controls can be set to true" result="PASS" /><testcase id="video_controls_true_controls_present" purpose="Check that the video.controls returns true if the controls attribute is present in the video element" result="PASS" /><testcase id="video_currentSrc_attribute_type" purpose="Check if the type of video.currentSrc is string" result="PASS" /><testcase id="video_currentsrc_empty_if_no_src" purpose="Check that the video.currentSrc returns empty if there is no source" result="PASS" /><testcase id="video_currentsrc_nonempty_after_adding_source_child" purpose="Check that the video.currentSrc returns non-empty if add source element" result="PASS" /><testcase id="video_currentsrc_nonempty_after_setting_src" purpose="Check that the video.currentSrc returns non-empty if src attribute give right address of the media resource" result="PASS" /><testcase id="video_currentsrc_property_exists" purpose="Check if the video.currentSrc property exists" result="PASS" /><testcase id="video_currentSrc_readonly" purpose="Check if the video.currentSrc attribute is readonly" result="PASS" /><testcase id="video_currentSrc_src_null" purpose="Check if video.currentSrc is empty string when set the video.src null" result="PASS" /><testcase id="video_currentTime_attribute_exists" purpose="Check if the video.currentTime attribute exists" result="PASS" /><testcase id="video_currentTime_attribute_type" purpose="Check if the type of video.currentTime attribute is number" result="PASS" /><testcase id="video_currentTime_basic" purpose="Check if the video.currentTime attribute return the current playback position it was set to 10" result="PASS" /><testcase id="video_currentTime_less_than_zero" purpose="Check if user agent displays correctly when browser does not support media elements (Seeking to a value less than 'startTime' seeks to 'startTime')" result="FAIL" /><testcase id="video_currentTime_value_duration" purpose="Check if the video.currentTime attribute return the end playback position it was set to duration" result="PASS" /><testcase id="video_currentTime_value_later_end" purpose="Check if the video.currentTime attribute return the end playback position it was set to later than the end of the media resource" result="PASS" /><testcase id="video_currentTime_value_null" purpose="Check if the video.currentTime attribute on getting it must return 0 it was set to null" result="PASS" /><testcase id="video_defaultMuted_attribute_exists" purpose="Check if the video.defaultMuted attribute exists" result="PASS" /><testcase id="video_defaultMuted_attribute_initial" purpose="Check if the video.defaultMuted initial value is false" result="PASS" /><testcase id="video_defaultMuted_attribute_type" purpose="Check if the type of video.defaultMuted is boolean" result="PASS" /><testcase id="video_defaultMuted_empty_string" purpose="Check if the value of the attribute video.defaultMuted set empty string,then compare media.defaultMuted is false" result="PASS" /><testcase id="video_defaultMuted_false_muted_absent" purpose="Check that the video.defaultMuted returns false if the muted attribute is absent in the video element" result="PASS" /><testcase id="video_defaultMuted_no_dynamic_effect" purpose="Check that the video.defaultMuted returns false if the muted attribute is set to true and the muted attribute is asent in the video element" result="PASS" /><testcase id="video_defaultMuted_no_dynamic_effect_muted" purpose="Check that the media.defaultMuted returns true if the muted attribute is set to false and the muted attribute is present in the video element" result="PASS" /><testcase id="video_defaultMuted_null" purpose="Check if the value of the attribute video.defaultMuted set null,then compare media.defaultMuted is false" result="PASS" /><testcase id="video_defaultMuted_true_muted_present" purpose="Check that the video.defaultMuted returns true if the muted attribute is present in the video element" result="PASS" /><testcase id="video_defaultPlaybackRate_attribute_exists" purpose="Check if the video.defaultPlaybackRate attribute exists" result="PASS" /><testcase id="video_defaultPlaybackRate_attribute_type" purpose="Check if the type of video.defaultPlaybackRate attribute is number" result="PASS" /><testcase id="video_defaultPlaybackRate_basic" purpose="Check if the video.defaultPlaybackRate attribute that on getting it must return 0.5 it was set to 0.5" result="PASS" /><testcase id="video_defaultPlaybackRate_default_value" purpose="Check if the video.defaultPlaybackRate attribute return 1.0 if it hasn't yet been set" result="PASS" /><testcase id="video_defaultPlaybackRate_not_effect_by_controller" purpose="Check if video.defaultPlaybackRate attributes have no effect when the media element has a current media controller" result="BLOCK" /><testcase id="video_defaultPlaybackRate_value_null" purpose="Check if the video.defaultPlaybackRate attribute that on getting it must return 0 it was set to null" result="PASS" /><testcase id="video_defaultPlaybackRate_value_zero" purpose="Check if the video.defaultPlaybackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="video_duration_attribute_exists" purpose="Check if the video.duration attribute exists" result="PASS" /><testcase id="video_duration_attribute_readonly" purpose="Check if the video.duration attribute is readonly" result="PASS" /><testcase id="video_duration_attribute_type" purpose="Check if the type of video.duration attribute is number" result="PASS" /><testcase id="video_duration_attribute_value_NaN" purpose="Check if the video.duration attribute return the Not-a-Number (NaN) value if no media data is available" result="PASS" /><testcase id="video_duration_attribute_value_resource" purpose="Check if the video.duration attribute return the time of the end of the media resource" result="PASS" /><testcase id="video_element" purpose="Check if element returns same video element twice" result="PASS" /><testcase id="video_ended_attribute_exists" purpose="Check if  the video.ended attribute exists" result="PASS" /><testcase id="video_ended_attribute_readonly" purpose="Check if video.ended is readonly" result="PASS" /><testcase id="video_ended_attribute_type" purpose="Check if the type of video.ended is boolean" result="PASS" /><testcase id="video_ended_canplaythrough" purpose="Check if the attribute video.ended should be false during canplaythrough event" result="PASS" /><testcase id="video_ended_currentTime_duration" purpose="Check if the value of attribute video.ended is true when set currentTime video.durations" result="PASS" /><testcase id="video_ended_default_value" purpose="Check if the default value of attribute video.ended is false" result="PASS" /><testcase id="video_ended_loaddata" purpose="Check if the value of attribute video.ended is false during loadeddata event" result="PASS" /><testcase id="video_ended_playing" purpose="Check if the value of attribute video.ended is false during playing event" result="PASS" /><testcase id="video_error_attribute_type" purpose="Check if the type of video.error is object" result="PASS" /><testcase id="video_error_property_exists" purpose="Check if the video.error property exists" result="PASS" /><testcase id="video_error_readonly" purpose="Check if the video.error attribute is readonly" result="PASS" /><testcase id="video_event_canplay" purpose="Check that the canplay event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_canplaythrough" purpose="Check that the canplaythrough event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_loadeddata" purpose="Check that the loadeddata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_loadedmetadata" purpose="Check that the loadedmetadata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_loadstart" purpose="Check that the loadstart event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_order_canplay_canplaythrough" purpose="Check that the canplay event is triggered before the canplaythrough event if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_order_canplay_playing" purpose="Check that the canplay event is triggered before the playing event if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_order_loadedmetadata_loadeddata" purpose="Check that the loadedmetadata event is triggered before the loadeddata event if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_order_loadstart_progress" purpose="Check that the loadstart event triggered before the progress event if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_play" purpose="Check that play event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_playing" purpose="Check that the playing event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_progress" purpose="Check that the progress event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_HAVE_CURRENT_DATA_constant_exists" purpose="Check if the video.HAVE_CURRENT_DATA exists" result="PASS" /><testcase id="video_HAVE_CURRENT_DATA_constant_type" purpose="Check if the type of video.HAVE_CURRENT_DATA is number" result="PASS" /><testcase id="video_HAVE_CURRENT_DATA_constant_value" purpose="Check if the value of video.HAVE_CURRENT_DATA is 2" result="PASS" /><testcase id="video_HAVE_ENOUGH_DATA_constant_exists" purpose="Check if the video.HAVE_ENOUGH_DATA exists" result="PASS" /><testcase id="video_HAVE_ENOUGH_DATA_constant_type" purpose="Check if the type of  video.HAVE_ENOUGH_DATA is number" result="PASS" /><testcase id="video_HAVE_ENOUGH_DATA_constant_value" purpose="Check if the value of video.HAVE_ENOUGH_DATA is 4" result="PASS" /><testcase id="video_HAVE_FUTURE_DATA_constant_exists" purpose="Check if the video.HAVE_FUTURE_DATA exists" result="PASS" /><testcase id="video_HAVE_FUTURE_DATA_constant_type" purpose="Check if the type of video.HAVE_FUTURE_DATA is number" result="PASS" /><testcase id="video_HAVE_FUTURE_DATA_constant_value" purpose="Check if the value of video.HAVE_FUTURE_DATA is 3" result="PASS" /><testcase id="video_HAVE_METADATA_constant_exists" purpose="Check if the video.HAVE_METADATA exists" result="PASS" /><testcase id="video_HAVE_METADATA_constant_type" purpose="Check if the type of video.HAVE_METADATA is number" result="PASS" /><testcase id="video_HAVE_METADATA_constant_value" purpose="Check if the value of video.HAVE_METADATA is 1" result="PASS" /><testcase id="video_HAVE_NOTHING_constant_exists" purpose="Check if the video.HAVE_NOTHING exists" result="PASS" /><testcase id="video_HAVE_NOTHING_constant_type" purpose="Check if the type of video.HAVE_NOTHING is number" result="PASS" /><testcase id="video_HAVE_NOTHING_constant_value" purpose="Check if the constant value of video.HAVE_NOTHING is 0" result="PASS" /><testcase id="video_height_attribute_exists" purpose="Check if the video.height attribute exists" result="PASS" /><testcase id="video_height_attribute_type" purpose="Check if the type of video.height is number" result="PASS" /><testcase id="video_height_initial" purpose="Check if the video.height intial value is a valid non-negative integer in the range 0 to 2147483647 inclusive" result="PASS" /><testcase id="video_height_reflects_float" purpose="Check that the video.height returns a shortest integer number if the height attribute is set to a floating-point number" result="PASS" /><testcase id="video_height_reflects_integer" purpose="Check that the video.height returns the integer number if the height attribute is set to a valid non-negative integer in the range 0 to 2147483647" result="PASS" /><testcase id="video_height_reflects_invalid" purpose="Check that the video.height returns zero if the height attribute is set to an invlid non-negative integer" result="PASS" /><testcase id="video_height_reflects_max" purpose="Check that the video.height returns maximum non-negative integer if the height attribute is set to the maximum non-negative integer" result="PASS" /><testcase id="video_height_reflects_negative" purpose="Check that the video.height returns zero if the height attribute is set to a negative integer" result="PASS" /><testcase id="video_height_reflects_upper" purpose="Check that the video.height returns zero if the height attribute is set to a number greater than the maximum non-negative integer" result="PASS" /><testcase id="video_height_reflects_zero" purpose="Check that the video.height returns zero if the height attribute is set to zero" result="PASS" /><testcase id="video_load_method" purpose="Check if video.load can start selecting and loading a new media resource from scratch" result="PASS" /><testcase id="video_load_method_exists" purpose="Check if the video.load attribute exists" result="PASS" /><testcase id="video_load_method_type" purpose="Check if the type of video.load is 'function'" result="PASS" /><testcase id="video_loop_attribute_exists" purpose="Check if the video.loop attribute exists" result="PASS" /><testcase id="video_loop_attribute_initial" purpose="Check if the video.loop initial value is false" result="PASS" /><testcase id="video_loop_attribute_type" purpose="Check if the type of video.loop is boolean" result="PASS" /><testcase id="video_loop_base" purpose="Check that the seeking event is triggered more than once  if the video.loop is set to true" result="PASS" /><testcase id="video_loop_current_media_controller" purpose="Check if the video element has a current media controller that expecting the loop attribute has no effect" result="FAIL" /><testcase id="video_loop_empty_string" purpose="Check if the value of the attribute video.loop is false if set it empty string" result="PASS" /><testcase id="video_loop_false_loop_absent" purpose="Check if video.loop returns false when the loop attribute is absent in the video element" result="PASS" /><testcase id="video_loop_null" purpose="Check if the value of the attribute video.loop is false if set it null" result="PASS" /><testcase id="video_loop_reflects_false" purpose="Check if the video.loop can be set to false" result="PASS" /><testcase id="video_loop_reflects_true" purpose="Check if the video.loop can be set to true" result="PASS" /><testcase id="video_loop_true_loop_present" purpose="Check that the video.loop returns true if the loop attribute is present in the video element" result="PASS" /><testcase id="video_MediaController_buffered_exists" purpose="Check if the video.MediaController.buffered exists" result="FAIL" /><testcase id="video_MediaController_buffered_readonly" purpose="Check if video.MediaController.buffered is readonly" result="FAIL" /><testcase id="video_MediaController_buffered_type" purpose="Check if video.MediaController.buffered is of type object" result="FAIL" /><testcase id="video_MediaController_currentTime_exists" purpose="Check if the video.MediaController.currentTime exists" result="FAIL" /><testcase id="video_MediaController_currentTime_type" purpose="Check if video.MediaController.currentTime is of type number" result="FAIL" /><testcase id="video_MediaController_defaultPlaybackRate_exists" purpose="Check if the video.MediaController.defaultPlaybackRate exists" result="FAIL" /><testcase id="video_MediaController_defaultPlaybackRate_type" purpose="Check if video.MediaController.defaultPlaybackRate is of type number" result="FAIL" /><testcase id="video_MediaController_duration_exists" purpose="Check if the video.MediaController.duration exists" result="FAIL" /><testcase id="video_MediaController_duration_readonly" purpose="Check if video.MediaController.duration is readonly" result="FAIL" /><testcase id="video_MediaController_duration_type" purpose="Check if video.MediaController.duration is of type number" result="FAIL" /><testcase id="video_MediaController_ended" purpose="Check if video.controller.onended event occurs" result="BLOCK" /><testcase id="video_MediaController_muted_exists" purpose="Check if the video.MediaController.muted exists" result="FAIL" /><testcase id="video_MediaController_muted_type" purpose="Check if video.MediaController.muted is of type boolean" result="FAIL" /><testcase id="video_MediaController_oncanplaythrough_event" purpose="Check if video.controller.canplaythrough event occurs" result="BLOCK" /><testcase id="video_MediaController_oncanplay_event" purpose="Check if video.controller.canplay event occurs" result="BLOCK" /><testcase id="video_MediaController_onemptied_event" purpose="Check if video.controller.emptied event occurs" result="BLOCK" /><testcase id="video_MediaController_onloadeddata_event" purpose="Check if video.controller.loadeddata event occurs" result="BLOCK" /><testcase id="video_MediaController_onloadedmetadata_event" purpose="Check if video.controller.loadedmetadata event occurs" result="BLOCK" /><testcase id="video_MediaController_onpause_event" purpose="Check if video.controller.pause event occurs" result="BLOCK" /><testcase id="video_MediaController_onplaying_event" purpose="Check if video.controller.onplaying is exists" result="BLOCK" /><testcase id="video_MediaController_onplay_event" purpose="Check if video.controller.onplay occurs" result="BLOCK" /><testcase id="video_MediaController_onratechange_event" purpose="Check if video.controller.onratechange is exists" result="BLOCK" /><testcase id="video_MediaController_onvolumechange_event" purpose="Check if video.controller.onvolumechange is exists" result="BLOCK" /><testcase id="video_MediaController_onwaiting_event" purpose="Check if video.controller.onwaiting occurs" result="BLOCK" /><testcase id="video_MediaController_paused_exists" purpose="Check if the video.MediaController.paused exists" result="FAIL" /><testcase id="video_MediaController_paused_readonly" purpose="Check if video.MediaController.paused is readonly" result="FAIL" /><testcase id="video_MediaController_paused_type" purpose="Check if video.MediaController.paused is of type boolean" result="FAIL" /><testcase id="video_MediaController_pause_exists" purpose="Check if the video.MediaController.pause exists" result="FAIL" /><testcase id="video_MediaController_pause_type" purpose="Check if video.MediaController.pause is of type function" result="FAIL" /><testcase id="video_MediaController_playbackRate_exists" purpose="Check if the video.MediaController.playbackRate exists" result="FAIL" /><testcase id="video_MediaController_playbackRate_type" purpose="Check if video.MediaController.playbackRate is of type number" result="FAIL" /><testcase id="video_MediaController_playbackState_ended" purpose="Check if video.MediaController.playbackState attribute is ended" result="BLOCK" /><testcase id="video_MediaController_playbackState_exists" purpose="Check if the video.MediaController.playbackState attribute exists" result="FAIL" /><testcase id="video_MediaController_playbackState_playing" purpose="Check if video.MediaController.playbackState attribute is playing" result="BLOCK" /><testcase id="video_MediaController_playbackState_readonly" purpose="Check if video.MediaController.playbackState attribute is readonly" result="FAIL" /><testcase id="video_MediaController_playbackState_type" purpose="Check if the type of video.MediaController.playbackState attribute is string" result="FAIL" /><testcase id="video_MediaController_playbackState_waiting" purpose="Check if video.MediaController.playbackState attribute is waiting" result="FAIL" /><testcase id="video_MediaController_played_exists" purpose="Check if the video.MediaController.played exists" result="FAIL" /><testcase id="video_MediaController_played_readonly" purpose="Check if video.MediaController.played is readonly" result="FAIL" /><testcase id="video_MediaController_played_type" purpose="Check if video.MediaController.played is of type object" result="FAIL" /><testcase id="video_MediaController_play_exists" purpose="Check if the video.MediaController.play exists" result="FAIL" /><testcase id="video_MediaController_play_type" purpose="Check if video.MediaController.play is of type function" result="FAIL" /><testcase id="video_MediaController_seekable_exists" purpose="Check if the video.MediaController.seekable exists" result="FAIL" /><testcase id="video_MediaController_seekable_readonly" purpose="Check if video.MediaController.seekable is readonly" result="FAIL" /><testcase id="video_MediaController_seekable_type" purpose="Check if video.MediaController.seekable is of type object" result="FAIL" /><testcase id="video_MediaController_unpause_base" purpose="Check if video.MediaController.unpause method, calling unpause method paused false callback play event" result="BLOCK" /><testcase id="video_MediaController_unpause_exists" purpose="Check if the video.MediaController.unpause method exists" result="FAIL" /><testcase id="video_MediaController_unpause_type" purpose="Check if the type of video.MediaController.unpause method is function" result="FAIL" /><testcase id="video_MediaController_volume_exists" purpose="Check if the video.MediaController.volume exists" result="FAIL" /><testcase id="video_MediaController_volume_type" purpose="Check if video.MediaController.volume is of type number" result="FAIL" /><testcase id="video_MediaError_code_exists" purpose="Check if the video.error.code exists" result="PASS" /><testcase id="video_MediaError_code_readonly" purpose="Check if video.error.code is readonly" result="PASS" /><testcase id="video_MediaError_code_type" purpose="Check if the type of video.error.code is 'number'" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_ABORTED_constant_exists" purpose="Check if the video.error.MEDIA_ERR_ABORTED exists" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_ABORTED_constant_type" purpose="Check if the type of video.error.MEDIA_ERR_ABORTED is 'number'" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_ABORTED_constant_value" purpose="Check if video.error.MEDIA_ERR_ABORTED const value is 1" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_DECODE_constant_exists" purpose="Check if the video.error.MEDIA_ERR_DECODE exists" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_DECODE_constant_type" purpose="Check if the type of video.error.MEDIA_ERR_DECODE is 'number'" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_DECODE_constant_value" purpose="Check if video.error.MEDIA_ERR_DECODE const value is 3" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_NETWORK_constant_exists" purpose="Check if the video.error.MEDIA_ERR_NETWORK exists" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_NETWORK_constant_type" purpose="Check if the type of video.error.MEDIA_ERR_NETWORK is 'number'" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_NETWORK_constant_value" purpose="Check if video.error.MEDIA_ERR_NETWORK const value is 2" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_exists" purpose="Check if the video.error.MEDIA_ERR_SRC_NOT_SUPPORTED exists" result="PASS" /><testcase id="video_mediaGroup_attribute_exists" purpose="Check if the video.mediaGroup exists" result="FAIL" /><testcase id="video_mediaGroup_attribute_type" purpose="Check if the type of video.mediaGroup is string" result="FAIL" /><testcase id="video_mediaGroup_empty_string" purpose="Check if the value of attribute of video.mediaGroup is empty string when you set it empty string" result="PASS" /><testcase id="video_mediaGroup_null" purpose="Check if the value of attribute video.mediaGroup when set it null" result="PASS" /><testcase id="video_mediaGroup_valid_value" purpose="Check if the value of video.mediaGroup is valid" result="PASS" /><testcase id="video_muted_attribute_exists" purpose="Check if the video.muted exists" result="PASS" /><testcase id="video_muted_attribute_initial" purpose="Check if the video.muted initial value is false" result="PASS" /><testcase id="video_muted_attribute_type" purpose="Check if the type of video.muted is boolean" result="PASS" /><testcase id="video_muted_innerHTML_get" purpose="Check that video.muted can be get with muted='' (innerHTML-created)" result="FAIL" /><testcase id="video_muted_load_notupdate" purpose="Check if the load algorithm does not update the muted IDL attribute to match the content attribute" result="FAIL" /><testcase id="video_muted_notpresent_get" purpose="Check that video.muted returns false if the muted attribute is not present in the video element" result="PASS" /><testcase id="video_muted_notpresent_set" purpose="Check if the video.muted can be set if the muted attribute is not present in the video element" result="PASS" /><testcase id="video_muted_overriding_volume_manual" purpose="Check if the muted attribute is present in the video element with volume is set to loudest that expecting the user hears no sound" result="PASS" /><testcase id="video_muted_present_get" purpose="Check that video.muted returns true if the muted attribute is present in the video element" result="FAIL" /><testcase id="video_muted_present_manual" purpose="Check if the muted attribute is present in the video element that expecting the user hears no sound" result="PASS" /><testcase id="video_muted_present_set" purpose="Check if the video.muted can be set if the muted attribute is present in the video element" result="FAIL" /><testcase id="video_muted_script_get1" purpose="Check that video.muted can be get (script-created)" result="PASS" /><testcase id="video_muted_script_get2" purpose="Check that video.muted can be get with muted='' (script-created)" result="PASS" /><testcase id="video_muted_script_set1" purpose="Check that video.muted can be set (script-created)" result="PASS" /><testcase id="video_muted_script_set2" purpose="Check that video.muted can be set with muted='' (script-created)" result="PASS" /><testcase id="video_muted_volumechange" purpose="Check that the volumechange event is triggered at the media element if the video.muted is changed" result="PASS" /><testcase id="video_muted_write_get" purpose="Check that video.muted can be get with muted='' (document.write-created)" result="FAIL" /><testcase id="video_networkState_attribute_type" purpose="Check if the type of video.networkState is number" result="PASS" /><testcase id="video_networkstate_initial" purpose="Check if the default value of video.networState is NETWORK_EMPTY" result="PASS" /><testcase id="video_networkstate_property_exists" purpose="Check if the video.networkState property exists" result="PASS" /><testcase id="video_networkState_readonly" purpose="Check if the video.networkState attribute is readonly" result="PASS" /><testcase id="video_NETWORK_EMPTY_constant_exists" purpose="Check if the video.NETWORK_EMPTY exists" result="PASS" /><testcase id="video_NETWORK_EMPTY_constant_type" purpose="Check if the type of video.NETWORK_EMPTY is number" result="PASS" /><testcase id="video_NETWORK_EMPTY_constant_value" purpose="Check if the video.NETWORK_EMPTY const value is 0" result="PASS" /><testcase id="video_NETWORK_IDLE_constant_exists" purpose="Check if the video.NETWORK_IDLE exists" result="PASS" /><testcase id="video_NETWORK_IDLE_constant_type" purpose="Check if the type of video.NETWORK_IDLE is number" result="PASS" /><testcase id="video_NETWORK_IDLE_constant_value" purpose="Check if the value of video.NETWORK_IDLE const is 1" result="PASS" /><testcase id="video_NETWORK_LOADING_constant_exists" purpose="Check if the video.NETWORK_LOADING exists" result="PASS" /><testcase id="video_NETWORK_LOADING_constant_type" purpose="Check if the type of video.NETWORK_LOADING is number" result="PASS" /><testcase id="video_NETWORK_LOADING_constant_value" purpose="Check if the value of video.NETWORK_LOADING const is 2" result="PASS" /><testcase id="video_NETWORK_NO_SOURCE_constant_exists" purpose="Check if the video.NETWORK_NO_SOURCE exists" result="PASS" /><testcase id="video_NETWORK_NO_SOURCE_constant_type" purpose="Check if the type of video.NETWORK_NO_SOURCE is number" result="PASS" /><testcase id="video_NETWORK_NO_SOURCE_constant_value" purpose="Check if the value of video.NETWORK_NO_SOURCE const is 3" result="PASS" /><testcase id="video_ondurationchange_event" purpose="Check if the event video.ondurationchange occurs" result="PASS" /><testcase id="video_onemptied_event" purpose="Check if the event video.onemptied occurs" result="PASS" /><testcase id="video_onended_event" purpose="Check if the event video.onended occurs when media resource is end" result="BLOCK" /><testcase id="video_onerror_event" purpose="Check if the event video.onerror occurs" result="PASS" /><testcase id="video_onpause_event" purpose="Check if the event video.onpause occurs" result="PASS" /><testcase id="video_onratechange_event_defaultPlaybackRate" purpose="Check if the event video.onratechange occurs when defaultPlaybackRate changed" result="PASS" /><testcase id="video_onratechange_event_playbackRate" purpose="Check if the event video.onratechange occurs when playbackRate changed" result="PASS" /><testcase id="video_onseeking_event" purpose="Check if the event video.onseeking occurs" result="PASS" /><testcase id="video_ontimeupdate_event" purpose="Check if the event video.ontimeupdate occurs" result="PASS" /><testcase id="video_onvolumechange_event_muted" purpose="Check if the event video.onvolumechange occurs when muted changed" result="PASS" /><testcase id="video_onvolumechange_event_volume" purpose="Check if the event video.onvolumechange occurs when volume changed" result="PASS" /><testcase id="video_onwaiting_event" purpose="Check if the event video.onwaiting occurs" result="PASS" /><testcase id="video_paused_attribute_default_value" purpose="Check if the video.paused attribute must initially be true" result="PASS" /><testcase id="video_paused_attribute_exists" purpose="Check if the video.paused attribute exists" result="PASS" /><testcase id="video_paused_attribute_readonly" purpose="Check if the video.paused attribute is readonly" result="PASS" /><testcase id="video_paused_attribute_type" purpose="Check if the type of video.paused attribute is boolean" result="PASS" /><testcase id="video_paused_false_during_play" purpose="Check that video.paused is false if play event is triggered" result="PASS" /><testcase id="video_paused_true_during_pause" purpose="Check that video.paused is true if pause event is triggered" result="PASS" /><testcase id="video_pause_3gp_h263_aac" purpose="Check if the video element can pause the H.263 decoding format video file" result="PASS" /><testcase id="video_pause_3gp_mpeg4_amr" purpose="Check if the video element can pause the MPEG-4 part 2 decoding format video file" result="BLOCK" /><testcase id="video_pause_method_exists" purpose="Check if the video.pause method exists" result="PASS" /><testcase id="video_pause_method_type" purpose="Check if video.pause is of type function" result="PASS" /><testcase id="video_pause_mp4_h264_aac" purpose="Check if the user agent supports mp4-h264-acc video playing, pause" result="PASS" /><testcase id="video_pause_ogg_theora_vorbis" purpose="Check if user agent is able to pause playing video playback for stream ogg theora vorbis" result="PASS" /><testcase id="video_pause_webm_vp8_vorbis" purpose="Check if user agent is able to pause playing video playback for stream webm vp8 vorbis" result="PASS" /><testcase id="video_playbackRate_attribute_exists" purpose="Check if the video.playbackRate attribute exists" result="PASS" /><testcase id="video_playbackRate_attribute_type" purpose="Check if the type of video.playbackRate attribute is number" result="PASS" /><testcase id="video_playbackRate_basic" purpose="Check if the video.playbackRate attribute that on getting it must return 2.0 it was set to 2.0" result="PASS" /><testcase id="video_playbackRate_default_value" purpose="Check if the video.playbackRate attribute value is 1.0 if it hasn't yet been set" result="PASS" /><testcase id="video_playbackRate_not_effect_by_controller" purpose="Check if video.playbackRate attributes have no effect when the media element has a current media controller" result="BLOCK" /><testcase id="video_playbackRate_value_null" purpose="Check if the video.playbackRate attribute return 0 it was set to null" result="PASS" /><testcase id="video_playbackRate_value_zero" purpose="Check if the video.playbackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="video_playback_h263" purpose="Check if video element can play the H.263 decoding format video file." result="FAIL" /><testcase id="video_playback_h264" purpose="Check if video element can play the H.264 decoding format video file." result="PASS" /><testcase id="video_playback_mpeg4" purpose="Check if video element can play the MPEG4 decoding format video file." result="FAIL" /><testcase id="video_played_attribute_exists" purpose="Check if the type of video.played attribute is [object TimeRanges]" result="PASS" /><testcase id="video_played_attribute_readonly" purpose="Check if video.played attribute is readonly" result="PASS" /><testcase id="video_played_attribute_type" purpose="Check if the type of attribute video.played is object" result="PASS" /><testcase id="video_played_length_default_value" purpose="Check if default value of the attribute video.played.length is 0" result="PASS" /><testcase id="video_play_3gp_h263_aac" purpose="Check if the video element can play the H.263 decoding format video file" result="PASS" /><testcase id="video_play_3gp_mpeg4_amr" purpose="Check if the video element can play the MPEG-4 part 2 decoding format video file" result="BLOCK" /><testcase id="video_play_method_exists" purpose="Check if the video.play method exists" result="PASS" /><testcase id="video_play_method_type" purpose="Check if video.play method is of type function" result="PASS" /><testcase id="video_play_mp4_h264_aac" purpose="Check if the user agent supports mp4-h264-acc video playing" result="PASS" /><testcase id="video_play_ogg_theora_vorbis" purpose="Check if user agent is able to play video stream ogg theora vorbis with event ended fired when ended playback" result="PASS" /><testcase id="video_play_webm_vp8_vorbis" purpose="Check if user agent is able to play video stream webm vp8 vorbis with event ended fired when ended playback" result="PASS" /><testcase id="video_poster_attribute_exists" purpose="Check if the video.poster exists" result="PASS" /><testcase id="video_poster_attribute_type" purpose="Check if the type of video.poster is string" result="PASS" /><testcase id="video_preload_attribute_type" purpose="Check if the type of video.preload is string" result="PASS" /><testcase id="video_preload_auto" purpose="Check if video.preload can be set to 'auto'" result="PASS" /><testcase id="video_preload_property_exists" purpose="Check if the video.preload property exists" result="PASS" /><testcase id="video_preload_reflects_auto_value" purpose="Check if video.preload reflects 'auto' value" result="PASS" /><testcase id="video_preload_reflects_metadata" purpose="Check if the video.preload reflects 'metadata' value" result="PASS" /><testcase id="video_preload_reflects_none" purpose="Check if the video.preload reflects 'none' value" result="PASS" /><testcase id="video_preload_reflects_none_autoplay" purpose="Check that video.preload reflects 'none' value even if autoplay attribute is present" result="PASS" /><testcase id="video_readyState_attribute_type" purpose="Check if the type of video.readyState attribute is number" result="PASS" /><testcase id="video_readystate_during_canplay" purpose="Check that the video.readyState is greater than or equal to HAVE_FUTURE_DATA if canplay event is triggered" result="PASS" /><testcase id="video_readystate_during_canplaythrough" purpose="Check that the video.readyState is HAVE_FUTURE_DATA if canplaythrough event is triggered" result="PASS" /><testcase id="video_readystate_during_loadeddata" purpose="Check that video.readyState is greater than or equal to HAVE_FUTURE_DATA if the loadeddata event is triggered" result="PASS" /><testcase id="video_readystate_during_loadedmetadata" purpose="Check that the video.readyState is greater than or equal to HAVE_FUTURE_DATA if loadedmetadata event is triggered" result="PASS" /><testcase id="video_readystate_during_playing" purpose="Check that video.readyState is greater than or equal to HAVE_FUTURE_DATA if playing event is triggered" result="PASS" /><testcase id="video_readystate_initial" purpose="Check if the default video.readyState begins with HAVE_NOTHING" result="PASS" /><testcase id="video_readystate_property_exists" purpose="Check if the video.readyState property exists" result="PASS" /><testcase id="video_resume_ogg_theora_vorbis" purpose="Check if user agent is able to resume paused video playback for stream ogg theora vorbis" result="PASS" /><testcase id="video_resume_webm_vp8_vorbis" purpose="Check if user agent is able to resume paused video playback for stream webm vp8 vorbis" result="PASS" /><testcase id="video_seekable_attribute_exists" purpose="Check if the video.seekable attribute exists" result="PASS" /><testcase id="video_seekable_attribute_readonly" purpose="Check if video.seekable attribute is readonly" result="PASS" /><testcase id="video_seekable_attribute_type" purpose="Check if the type of video.seekable attribute is TimeRanges object" result="PASS" /><testcase id="video_seekable_length_default_value" purpose="Check if the default value of attribute video.seekable.length is 0" result="PASS" /><testcase id="video_seeking_attribute_exists" purpose="Check if the video.seeking attribute exists" result="PASS" /><testcase id="video_seeking_attribute_readonly" purpose="Check if the video.seeking attribute is readonly" result="PASS" /><testcase id="video_seeking_attribute_type" purpose="Check if the type of video.seeking attribute is boolean" result="PASS" /><testcase id="video_seeking_default_value" purpose="Check if the video.seeking attribute must initially have the value false" result="PASS" /><testcase id="video_seeking_value_true" purpose="Check if the video.seeking attribute returns true if the user agent is currently seeking" result="PASS" /><testcase id="video_seek_ogg_theora_vorbis" purpose="Check if user agent is able to seek video playback with currentTime attribute for stream ogg theora vorbis" result="PASS" /><testcase id="video_seek_webm_vp8_vorbis" purpose="Check if user agent is able to seek video playback with currentTime attribute for stream webm vp8 vorbis" result="PASS" /><testcase id="video_src_attribute_exists" purpose="Check if the video.src attribute exists" result="PASS" /><testcase id="video_src_attribute_type" purpose="Check if the type of video.src is string" result="PASS" /><testcase id="video_src_basic" purpose="Check if video.src can get src attibute value" result="PASS" /><testcase id="video_src_null" purpose="Check if video.src return empty string when you set it null" result="FAIL" /><testcase id="video_src_reflects_attribute_not_source_elements" purpose="Check if video.src reflect src attribute, not source child elements" result="PASS" /><testcase id="video_src_reflects_no_value" purpose="Check that the video.src is empty if there is no source" result="PASS" /><testcase id="video_src_removal_does_not_trigger_loadstart" purpose="Check that the loadstart event isnot triggered if remove video.src attribute source" result="PASS" /><testcase id="video_stop_ogg_theora_vorbis" purpose="Check if user agent is able to stop video playback for stream ogg theora vorbis" result="PASS" /><testcase id="video_stop_webm_vp8_vorbis" purpose="Check if user agent is able to stop video playback for stream webm vp8 vorbis" result="PASS" /><testcase id="video_textTracks" purpose="Check if the video.textTracks attribute is valid" result="PASS" /><testcase id="video_textTracks_exist" purpose="Check if the vedio.textTracks attribute exists" result="PASS" /><testcase id="video_textTracks_readonly" purpose="Check if the vedio.textTracks attribute is readonly" result="PASS" /><testcase id="video_textTracks_type" purpose="Check if the type of vedio.textTracks attribute is object" result="PASS" /><testcase id="video_textTracks_valid_value" purpose="Check if the textTracks attribute of media elements must return an array host object for objects of type TextTrack" result="PASS" /><testcase id="video_TimeRanges_end_exists" purpose="Check if the video.TimeRanges.end attribute exists" result="PASS" /><testcase id="video_TimeRanges_end_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the video.TimeRanges.end method index is out of range" result="PASS" /><testcase id="video_TimeRanges_length_exists" purpose="Check if the video.TimeRanges.length attribute exists" result="PASS" /><testcase id="video_TimeRanges_length_readonly" purpose="Check if video.TimeRanges.length is readonly" result="PASS" /><testcase id="video_TimeRanges_length_type" purpose="Check if video.TimeRanges.length is of type number" result="PASS" /><testcase id="video_TimeRanges_start_exists" purpose="Check if the video.TimeRanges.start method exists" result="PASS" /><testcase id="video_TimeRanges_start_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the video.TimeRanges.start method index is out of range" result="PASS" /><testcase id="video_videoHeght_media_resource_available" purpose="Check if video.videoheight return the intrinsic height of the video when have a media resource" result="PASS" /><testcase id="video_videoHeight_attribute_exists" purpose="Check if the video.videoHeight attribute exists" result="PASS" /><testcase id="video_videoHeight_attribute_type" purpose="Check if the type of video.videoHihgt is number" result="PASS" /><testcase id="video_videoHeight_default_value" purpose="Check if the default value of video.videoHeight is 0" result="PASS" /><testcase id="video_videoHeight_readonly" purpose="Check if the videoHeight attribute is readonly" result="PASS" /><testcase id="video_videoHeight_readState_HAVE_NOTHING" purpose="Check if readyState attribute is HAVE_NOTHING, then video.videoHeight must return 0" result="PASS" /><testcase id="video_videoWidth_attribute_exists" purpose="Check if the video.videoWidth attribute exists" result="PASS" /><testcase id="video_videoWidth_attribute_type" purpose="Check if the type of video.videoWidth is number" result="PASS" /><testcase id="video_videoWidth_default_value" purpose="Check if the default value of video.videoWidth is 0" result="PASS" /><testcase id="video_videoWidth_media_resource_available" purpose="Check if video.videoWidth return the intrinsic width of the video when have a media resource" result="PASS" /><testcase id="video_videoWidth_readonly" purpose="Check if the videoWidth attribute is readonly" result="PASS" /><testcase id="video_volume_attribute_exists" purpose="Check if the video.volume attribute exists" result="PASS" /><testcase id="video_volume_attribute_type" purpose="Check if the type of video.volume attribute is number" result="PASS" /><testcase id="video_volume_exception_lower" purpose="Check that user agent is able to get an INDEX_SIZE_ERR exception if set video.volume with new value less than 0.0" result="PASS" /><testcase id="video_volume_exception_upper" purpose="Check that user agent is able to get an INDEX_SIZE_ERR exception if set video.volume with new value more than 1.0" result="PASS" /><testcase id="video_volume_initial" purpose="Check if the intial value of the video.volume is in the range 0.0 to 1.0 inclusive" result="PASS" /><testcase id="video_volume_loudest" purpose="Check if user agent is able to set video.volume with new value 1.0" result="PASS" /><testcase id="video_volume_loudest_manual" purpose="Check if the volume attribute is set to 1.0 as loudest in the video element that expecting the user hears sound loudly" result="PASS" /><testcase id="video_volume_normal" purpose="Check if user agent is able to set video.volume with new value in the range 0.0 to 1.0 inclusive" result="PASS" /><testcase id="video_volume_silent" purpose="Check if user agent is able to set video.volume with new value 0.0" result="PASS" /><testcase id="video_volume_silent_manual" purpose="Check if the volume attribute is set to 0.0 as silent in the video element that expecting the user hears no sound" result="PASS" /><testcase id="video_volume_volumechange" purpose="Check that the volumechange event is triggered at the media element if video.volume is changed" result="PASS" /><testcase id="video_width_attribute_exists" purpose="Check if the video.width attribute exists" result="PASS" /><testcase id="video_width_attribute_type" purpose="Check if the type of video.width is number" result="PASS" /><testcase id="video_width_initial" purpose="Check if the video.width intial value is a valid non-negative integer in the range 0 to 2147483647 inclusive" result="PASS" /><testcase id="video_width_reflects_float" purpose="Check that the video.width returns a shortest integer number if the width attribute is set to a floating-point number" result="PASS" /><testcase id="video_width_reflects_integer" purpose="Check that the video.width returns the integer number if the width attribute is set to a valid non-negative integer in the range 0 to 2147483647" result="PASS" /><testcase id="video_width_reflects_invalid" purpose="Check that the video.width returns zero if the width attribute is set to an invlid non-negative integer" result="PASS" /><testcase id="video_width_reflects_max" purpose="Check that the video.width returns maximum non-negative integer if the width attribute is set to the maximum non-negative integer" result="PASS" /><testcase id="video_width_reflects_negative" purpose="Check that the video.width returns zero if the width attribute is set to a negative integer" result="PASS" /><testcase id="video_width_reflects_upper" purpose="Check that the video.width returns zero if the width attribute is set to a number greater than the maximum non-negative integer" result="PASS" /><testcase id="video_width_reflects_zero" purpose="Check that the video.width returns zero if the width attribute is set to zero" result="PASS" /><testcase id="video_zero_default_state" purpose="Check that a video loads the default pause state is true" result="PASS" /></category><category name="W3C_HTML5 APIs/UI/Web Notifications"><testcase id="notification_body" purpose="Check if the notification body show correct" result="PASS" /><testcase id="notification_constructor" purpose="Check if Notification has all valid arguments that expecting an notification is to be created" result="PASS" /><testcase id="notification_onclose_exist" purpose="Check if notification.onclose attribute exists" result="PASS" /><testcase id="notification_onclose_type" purpose="Check if the type notification.onclose attribute is object" result="PASS" /><testcase id="notification_permission_exists" purpose="Check if Notification.permission attribute exists" result="PASS" /><testcase id="notification_permission_readonly" purpose="Check if Notification.permission attribute is readonly" result="PASS" /><testcase id="notification_permission_type" purpose="Check if the type of Notification.permission attribute is string" result="PASS" /><testcase id="notification_requestPermission_exist" purpose="Check if notification.requestPermission method exists" result="PASS" /><testcase id="notification_requestPermission_type" purpose="Check if the type notification.requestPermission method is function" result="PASS" /><testcase id="notification_supports" purpose="Check if notification supports" result="PASS" /></category><category name="Crosswalk WRT/CSP"><testcase id="connectsrccrossoriginmultixmlhttprequestallowedtwo" purpose="Check if user agent is able to open second allowed external resource by xhr when connect-src is cross-origin." result="PASS" /><testcase id="connectsrccrossoriginmultixmlhttprequestblocked" purpose="Check if user agent is unable to open not-allowed external resource by xhr when connect-src is multi cross-origin." result="PASS" /><testcase id="connectsrccrossoriginmultixmlhttprequestblockedint" purpose="Check if user agent is unable to open not-allowed external resource by xhr when connect-src is multi cross-origin." result="PASS" /><testcase id="connectsrccrossoriginxmlhttprequestallowed" purpose="Check if user agent is able to open external resource by xhr when connect-src is cross-origin." result="PASS" /><testcase id="connectsrccrossoriginxmlhttprequestblocked" purpose="Check if user agent is unable to open not-allowed external resource by xhr when connect-src is cross-origin." result="PASS" /><testcase id="connectsrcnonexmlhttprequestblocked" purpose="Check if user agent is unable to open internal resource by xhr when connect-src is none." result="PASS" /><testcase id="connectsrcnonexmlhttprequestblockedext" purpose="Check if user agent is unable to open external resource by xhr when connect-src is none." result="PASS" /><testcase id="connectsrcselfxmlhttprequestallowed" purpose="Check if user agent is able to open internal resource by xhr when connect-src is 'self'." result="PASS" /><testcase id="connectsrcselfxmlhttprequestblocked" purpose="Check if user agent is able to open internal resource by xhr when connect-src is 'self'." result="PASS" /><testcase id="defaultsrcasteriskunsafeinlinelocal" purpose="Check if default-src is '*' and about is 'unsafe-inline, that local script will be executed." result="PASS" /><testcase id="roscriptsrcselfunsafeinlineunsafeeval" purpose="Check if inline function eval works well when script-src is self, unsafe-inline, unsafe-eval in report only mode." result="PASS" /><testcase id="stylesrcunsafeinlineblockedint" purpose="Check if user agent is unable to use internal style resource when style-src is unsafe-inline." result="PASS" /></category></test_definition>