<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="../../../../../../style/components.xsl"?><test_definition><environment arch="X86" branch="Stable" build="16.44.392.0" hardware="Desktop" platform="Ubuntu" segment="Embedded Crosswalk 32-bit" /><category name="W3C_HTML5 APIs/Media/HTML5 The audio element"><testcase id="audio_MediaController_buffered_exists" purpose="Check if audio.MediaController.buffered exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_buffered_readonly" purpose="Check if audio.MediaController.buffered is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_buffered_type" purpose="Check if audio.MediaController.buffered is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_currentTime_exists" purpose="Check if audio.MediaController.currentTime exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_currentTime_type" purpose="Check if audio.MediaController.currentTime is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_defaultPlaybackRate_exists" purpose="Check if audio.MediaController.defaultPlaybackRate exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_defaultPlaybackRate_type" purpose="Check if audio.MediaController.defaultPlaybackRate is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_duration_exists" purpose="Check if audio.MediaController.duration exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_duration_readonly" purpose="Check if audio.MediaController.duration is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_duration_type" purpose="Check if audio.MediaController.duration is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_ended" purpose="Check if audio.controller.onended event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_muted_exists" purpose="Check if audio.MediaController.muted exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_muted_type" purpose="Check if audio.MediaController.muted is of type boolean" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_oncanplay_event" purpose="Check if audio.controller.canplay event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_oncanplaythrough_event" purpose="Check if audio.controller.canplaythrough event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onemptied_event" purpose="Check if audio.controller.emptied event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onloadeddata_event" purpose="Check if audio.controller.loadeddata event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onloadedmetadata_event" purpose="Check if audio.controller.loadedmetadata event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onpause_event" purpose="Check if audio.controller.pause event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onplay_event" purpose="Check if audio.controller.play event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onplaying_event" purpose="Check if audio.controller.playing event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onratechange_event" purpose="Check if audio.controller.ratechange event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onvolumechange_event" purpose="Check if audio.controller.volumechange event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_onwaiting_event" purpose="Check if audio.controller.waiting event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_pause_exists" purpose="Check if audio.MediaController.pause exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_pause_type" purpose="Check if audio.MediaController.pause is of type function" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_paused_exists" purpose="Check if audio.MediaController.paused exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_paused_readonly" purpose="Check if audio.MediaController.paused is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_paused_type" purpose="Check if audio.MediaController.paused is of type boolean" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_play_exists" purpose="Check if audio.MediaController.play exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_play_type" purpose="Check if audio.MediaController.play is of type function" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_playbackRate_exists" purpose="Check if audio.MediaController.playbackRate exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_playbackRate_type" purpose="Check if audio.MediaController.playbackRate is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_playbackState_ended" purpose="Check if audio.MediaController.playbackState attribute is ended" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_playbackState_exists" purpose="Check if audio.MediaController.playbackState attribute exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_playbackState_playing" purpose="Check if audio.MediaController.playbackState attribute is playing" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_playbackState_readonly" purpose="Check if audio.MediaController.playbackState attribute is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_playbackState_type" purpose="Check if the type of audio.MediaController.playbackState attribute is string" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_playbackState_waiting" purpose="Check if audio.MediaController.playbackState attribute is waiting" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_played_exists" purpose="Check if audio.MediaController.played exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_played_readonly" purpose="Check if audio.MediaController.played is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_played_type" purpose="Check if audio.MediaController.played is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_seekable_exists" purpose="Check if audio.MediaController.seekable exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_seekable_readonly" purpose="Check if audio.MediaController.seekable is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_seekable_type" purpose="Check if audio.MediaController.seekable is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_unpause_base" purpose="Check if audio.MediaController.unpause method, calling unpause method paused false callback play event" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_MediaController_unpause_exists" purpose="Check if audio.MediaController.unpause method exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_unpause_type" purpose="Check if the type of audio.MediaController.unpause method is function" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_volume_exists" purpose="Check if audio.MediaController.volume exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaController_volume_type" purpose="Check if audio.MediaController.volume is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_MediaError_MEDIA_ERR_ABORTED_constant_exists" purpose="Check if audio.error.MEDIA_ERR_ABORTED exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_ABORTED_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_ABORTED is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_ABORTED_constant_value" purpose="Check if audio.error.MEDIA_ERR_ABORTED const value is 1" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_DECODE_constant_exists" purpose="Check if audio.error.MEDIA_ERR_DECODE exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_DECODE_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_DECODE is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_DECODE_constant_value" purpose="Check if audio.error.MEDIA_ERR_DECODE const value is 3" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_NETWORK_constant_exists" purpose="Check if audio.error.MEDIA_ERR_NETWORK exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_NETWORK_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_NETWORK is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_NETWORK_constant_value" purpose="Check if audio.error.MEDIA_ERR_NETWORK const value is 2" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_exists" purpose="Check if audio.error.MEDIA_ERR_SRC_NOT_SUPPORTED exists" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_type" purpose="Check if the type of audio.error.MEDIA_ERR_SRC_NOT_SUPPORTED is 'number'" result="PASS" /><testcase id="audio_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_value" purpose="Check if audio.error.MEDIA_ERR_SRC_NOT_SUPPORTED const value is 4" result="PASS" /><testcase id="audio_MediaError_code_exists" purpose="Check if audio.error.code exists" result="PASS" /><testcase id="audio_MediaError_code_readonly" purpose="Check if audio.error.code is readonly" result="PASS" /><testcase id="audio_MediaError_code_type" purpose="Check if the type of audio.error.code is 'number'" result="PASS" /><testcase id="audio_TimeRanges_end_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the audio.TimeRanges.end method index is out of range" result="PASS" /><testcase id="audio_TimeRanges_end_exists" purpose="Check if audio.TimeRanges.end exists" result="PASS" /><testcase id="audio_TimeRanges_length_exists" purpose="Check if audio.TimeRanges.length exists" result="PASS" /><testcase id="audio_TimeRanges_length_readonly" purpose="Check if audio.TimeRanges.length is readonly" result="PASS" /><testcase id="audio_TimeRanges_length_type" purpose="Check if audio.TimeRanges.length is of type number" result="PASS" /><testcase id="audio_TimeRanges_start_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the audio.TimeRanges.start method index is out of range" result="PASS" /><testcase id="audio_TimeRanges_start_exists" purpose="Check if audio.TimeRanges.start exists" result="PASS" /><testcase id="audio_attributes/1" purpose="audio attributes Test/Check if audio.error exists" result="PASS" /><testcase id="audio_attributes/10" purpose="audio attributes Test/Check if audio.NETWORK_EMPTY is of type number" result="PASS" /><testcase id="audio_attributes/11" purpose="audio attributes Test/Check if audio.NETWORK_EMPTY is of default value 0" result="PASS" /><testcase id="audio_attributes/12" purpose="audio attributes Test/Check if audio.NETWORK_IDLE exists" result="PASS" /><testcase id="audio_attributes/13" purpose="audio attributes Test/Check if audio.NETWORK_IDLE is of type number" result="PASS" /><testcase id="audio_attributes/14" purpose="audio attributes Test/Check if audio.NETWORK_IDLE is of default value 1" result="PASS" /><testcase id="audio_attributes/15" purpose="audio attributes Test/Check if audio.NETWORK_LOADING exists" result="PASS" /><testcase id="audio_attributes/16" purpose="audio attributes Test/Check if audio.NETWORK_LOADING is of type number" result="PASS" /><testcase id="audio_attributes/17" purpose="audio attributes Test/Check if audio.NETWORK_LOADING is of default value 2" result="PASS" /><testcase id="audio_attributes/18" purpose="audio attributes Test/Check if audio.NETWORK_NO_SOURCE exists" result="PASS" /><testcase id="audio_attributes/19" purpose="audio attributes Test/Check if audio.NETWORK_NO_SOURCE is of type number" result="PASS" /><testcase id="audio_attributes/2" purpose="audio attributes Test/Check if audio.error is of type object" result="PASS" /><testcase id="audio_attributes/20" purpose="audio attributes Test/Check if audio.NETWORK_NO_SOURCE is of default value 3" result="PASS" /><testcase id="audio_attributes/21" purpose="audio attributes Test/Check if audio.networkState exists" result="PASS" /><testcase id="audio_attributes/22" purpose="audio attributes Test/Check if audio.networkState is of type number" result="PASS" /><testcase id="audio_attributes/23" purpose="audio attributes Test/Check if audio.networkState initial value is in range [0, 65535]" result="PASS" /><testcase id="audio_attributes/24" purpose="audio attributes Test/Check if audio.preload exists" result="PASS" /><testcase id="audio_attributes/25" purpose="audio attributes Test/Check if audio.preload is of type string" result="PASS" /><testcase id="audio_attributes/26" purpose="audio attributes Test/Check if audio.buffered exists" result="PASS" /><testcase id="audio_attributes/27" purpose="audio attributes Test/Check if audio.buffered is of type object" result="PASS" /><testcase id="audio_attributes/28" purpose="audio attributes Test/Check if audio.HAVE_NOTHING exists" result="PASS" /><testcase id="audio_attributes/29" purpose="audio attributes Test/Check if audio.HAVE_NOTHING is of type number" result="PASS" /><testcase id="audio_attributes/3" purpose="audio attributes Test/Check if audio.src exists" result="PASS" /><testcase id="audio_attributes/30" purpose="audio attributes Test/Check if audio.HAVE_NOTHING is of default value 0" result="PASS" /><testcase id="audio_attributes/31" purpose="audio attributes Test/Check if audio.HAVE_METADATA exists" result="PASS" /><testcase id="audio_attributes/32" purpose="audio attributes Test/Check if audio.HAVE_METADATA is of type number" result="PASS" /><testcase id="audio_attributes/33" purpose="audio attributes Test/Check if audio.HAVE_METADATA is of default value 1" result="PASS" /><testcase id="audio_attributes/34" purpose="audio attributes Test/Check if audio.HAVE_CURRENT_DATA exists" result="PASS" /><testcase id="audio_attributes/35" purpose="audio attributes Test/Check if audio.HAVE_CURRENT_DATA is of type number" result="PASS" /><testcase id="audio_attributes/36" purpose="audio attributes Test/Check if audio.HAVE_CURRENT_DATA is of default value 2" result="PASS" /><testcase id="audio_attributes/37" purpose="audio attributes Test/Check if audio.HAVE_FUTURE_DATA exists" result="PASS" /><testcase id="audio_attributes/38" purpose="audio attributes Test/Check if audio.HAVE_FUTURE_DATA is of type number" result="PASS" /><testcase id="audio_attributes/39" purpose="audio attributes Test/Check if audio.HAVE_FUTURE_DATA is of default value 3" result="PASS" /><testcase id="audio_attributes/4" purpose="audio attributes Test/Check if audio.src is of type string" result="PASS" /><testcase id="audio_attributes/40" purpose="audio attributes Test/Check if audio.HAVE_ENOUGH_DATA exists" result="PASS" /><testcase id="audio_attributes/41" purpose="audio attributes Test/Check if audio.HAVE_ENOUGH_DATA is of type number" result="PASS" /><testcase id="audio_attributes/42" purpose="audio attributes Test/Check if audio.HAVE_ENOUGH_DATA is of default value 4" result="PASS" /><testcase id="audio_attributes/43" purpose="audio attributes Test/Check if audio.readyState exists" result="PASS" /><testcase id="audio_attributes/44" purpose="audio attributes Test/Check if audio.readyState is of type number" result="PASS" /><testcase id="audio_attributes/45" purpose="audio attributes Test/Check if audio.readyState initial value is in range [0, 65535]" result="PASS" /><testcase id="audio_attributes/46" purpose="audio attributes Test/Check if audio.seeking exists" result="PASS" /><testcase id="audio_attributes/47" purpose="audio attributes Test/Check if audio.seeking is of type boolean" result="PASS" /><testcase id="audio_attributes/48" purpose="audio attributes Test/Check if audio.seeking initial value is false" result="PASS" /><testcase id="audio_attributes/49" purpose="audio attributes Test/Check if audio.currentTime exists" result="PASS" /><testcase id="audio_attributes/5" purpose="audio attributes Test/Check if audio.currentSrc exists" result="PASS" /><testcase id="audio_attributes/50" purpose="audio attributes Test/Check if audio.currentTime is of type number" result="PASS" /><testcase id="audio_attributes/51" purpose="audio attributes Test/Check if audio.duration exists" result="PASS" /><testcase id="audio_attributes/52" purpose="audio attributes Test/Check if audio.duration is of type number" result="PASS" /><testcase id="audio_attributes/53" purpose="audio attributes Test/Check if audio.startDate exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_attributes/54" purpose="audio attributes Test/Check if audio.startDate is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_attributes/55" purpose="audio attributes Test/Check if audio.paused exists" result="PASS" /><testcase id="audio_attributes/56" purpose="audio attributes Test/Check if audio.paused is of type boolean" result="PASS" /><testcase id="audio_attributes/57" purpose="audio attributes Test/Check if audio.paused initial value is true" result="PASS" /><testcase id="audio_attributes/58" purpose="audio attributes Test/Check if audio.defaultPlaybackRate exists" result="PASS" /><testcase id="audio_attributes/59" purpose="audio attributes Test/Check if audio.defaultPlaybackRate is of type number" result="PASS" /><testcase id="audio_attributes/6" purpose="audio attributes Test/Check if audio.currentSrc is of type string" result="PASS" /><testcase id="audio_attributes/60" purpose="audio attributes Test/Check if audio.playbackRate exists" result="PASS" /><testcase id="audio_attributes/61" purpose="audio attributes Test/Check if audio.playbackRate is of type number" result="PASS" /><testcase id="audio_attributes/62" purpose="audio attributes Test/Check if audio.played exists" result="PASS" /><testcase id="audio_attributes/63" purpose="audio attributes Test/Check if audio.played is of type object" result="PASS" /><testcase id="audio_attributes/64" purpose="audio attributes Test/Check if audio.seekable exists" result="PASS" /><testcase id="audio_attributes/65" purpose="audio attributes Test/Check if audio.seekable is of type object" result="PASS" /><testcase id="audio_attributes/66" purpose="audio attributes Test/Check if audio.ended exists" result="PASS" /><testcase id="audio_attributes/67" purpose="audio attributes Test/Check if audio.ended is of type boolean" result="PASS" /><testcase id="audio_attributes/68" purpose="audio attributes Test/Check if audio.ended initial value is false" result="PASS" /><testcase id="audio_attributes/69" purpose="audio attributes Test/Check if audio.autoplay exists" result="PASS" /><testcase id="audio_attributes/7" purpose="audio attributes Test/Check if audio.crossOrigin exists" result="PASS" /><testcase id="audio_attributes/70" purpose="audio attributes Test/Check if audio.autoplay is of type boolean" result="PASS" /><testcase id="audio_attributes/71" purpose="audio attributes Test/Check if audio.autoplay initial value is false" result="PASS" /><testcase id="audio_attributes/72" purpose="audio attributes Test/Check if audio.loop exists" result="PASS" /><testcase id="audio_attributes/73" purpose="audio attributes Test/Check if audio.loop is of type boolean" result="PASS" /><testcase id="audio_attributes/74" purpose="audio attributes Test/Check if audio.loop initial value is false" result="PASS" /><testcase id="audio_attributes/75" purpose="audio attributes Test/Check if audio.mediaGroup exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_attributes/76" purpose="audio attributes Test/Check if audio.mediaGroup is of type string" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_attributes/77" purpose="audio attributes Test/Check if audio.controller exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_attributes/78" purpose="audio attributes Test/Check if audio.controller is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_attributes/79" purpose="audio attributes Test/Check if audio.controls exists" result="PASS" /><testcase id="audio_attributes/8" purpose="audio attributes Test/Check if audio.crossOrigin is of type string" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_attributes/80" purpose="audio attributes Test/Check if audio.controls is of type boolean" result="PASS" /><testcase id="audio_attributes/81" purpose="audio attributes Test/Check if audio.controls initial value is false" result="PASS" /><testcase id="audio_attributes/82" purpose="audio attributes Test/Check if audio.volume exists" result="PASS" /><testcase id="audio_attributes/83" purpose="audio attributes Test/Check if audio.volume is of type number" result="PASS" /><testcase id="audio_attributes/84" purpose="audio attributes Test/Check if audio.muted exists" result="PASS" /><testcase id="audio_attributes/85" purpose="audio attributes Test/Check if audio.muted is of type boolean" result="PASS" /><testcase id="audio_attributes/86" purpose="audio attributes Test/Check if audio.muted initial value is false" result="PASS" /><testcase id="audio_attributes/87" purpose="audio attributes Test/Check if audio.defaultMuted exists" result="PASS" /><testcase id="audio_attributes/88" purpose="audio attributes Test/Check if audio.defaultMuted is of type boolean" result="PASS" /><testcase id="audio_attributes/89" purpose="audio attributes Test/Check if audio.defaultMuted initial value is false" result="PASS" /><testcase id="audio_attributes/9" purpose="audio attributes Test/Check if audio.NETWORK_EMPTY exists" result="PASS" /><testcase id="audio_autoplay_empty_string" purpose="Check if the attribute audio.autoplay is false when set it empty string" result="PASS" /><testcase id="audio_autoplay_null" purpose="Check if the value of attribute of audio.autoplay is false when you set it null" result="PASS" /><testcase id="audio_autoplay_onloadedmetadata" purpose="Check if audio.autoplay attribute invoked,then audio.onloadedmetadata() function triggered" result="PASS" /><testcase id="audio_autoplay_true_autoplay_present" purpose="Check if audio.autoplay returns true when the controls attribute is present in the audio element" result="PASS" /><testcase id="audio_buffered_end_type" purpose="Check if the type of audio.buffered.end is function" result="PASS" /><testcase id="audio_buffered_length_default_value" purpose="Check if the audio.buffered length is zero,typically this will be a single range anchored at the zero point" result="PASS" /><testcase id="audio_buffered_readonly" purpose="Check if the audio.buffered attribute is readonly" result="PASS" /><testcase id="audio_buffered_start_type" purpose="Check if the type of audio.buffered.start is function" result="PASS" /><testcase id="audio_canPlayType_codecs_order" purpose="Check if the codecs parameter order of audio.canPlayType" result="PASS" /><testcase id="audio_canPlayType_empty_string" purpose="Check if audio.canPlayType return empty string if arguments is a empty string" result="PASS" /><testcase id="audio_canPlayType_method_type" purpose="Check if the type of audio.canplayType is 'function'" result="PASS" /><testcase id="audio_canPlayType_mp3" purpose="Check if the browser really supports playing MP3s" result="PASS" /><testcase id="audio_canPlayType_null" purpose="Check if audio.canPlayType return empty string if arguments is null" result="PASS" /><testcase id="audio_canPlayType_return_maybe" purpose="Check if audio.canPlayType() return maybe if the argument is 'audio/ogg'" result="PASS" /><testcase id="audio_canPlayType_return_probably" purpose="Check if the method audio.canPlayType() return probably if video can play the ogg type" result="PASS" /><testcase id="audio_canplaytype_application_octet_stream" purpose="Check that audio.canPlayType method support octet-stream" result="PASS" /><testcase id="audio_canplaytype_bogus_type" purpose="Check that audio.canPlayType method support marks-fantasmagorical-format" result="PASS" /><testcase id="audio_canplaytype_method_exists" purpose="Check that audio.canPlayType method exists" result="PASS" /><testcase id="audio_canplaytype_mp4_supported_but_no_codecs_parameter" purpose="Check that audio.canPlayType method supported mp4 format codecs parameter" result="PASS" /><testcase id="audio_canplaytype_ogg_supported_but_no_codecs_parameter" purpose="Check that audio.canPlayType method supported ogg format codecs parameter" result="PASS" /><testcase id="audio_constructor" purpose="Check if new Audio() returns a new audio element" result="PASS" /><testcase id="audio_constructor_src" purpose="Check if new Audio( url ) returns a new audio element" result="PASS" /><testcase id="audio_controller_MediaController" purpose="Check if the attribute audio.controller is not null when set it an object MediaController" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_controller_default_value" purpose="Check if the defaut value of audio.controller is null" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_controls_empty_string" purpose="Check if the value of attribute audio.controls is false when set it empty string" result="PASS" /><testcase id="audio_controls_false_controls_absent" purpose="Check if audio.controls returns false when the controls attribute is absent in the audio element" result="PASS" /><testcase id="audio_controls_null" purpose="Check if the value of attribute audio.controls is false when set it null" result="PASS" /><testcase id="audio_controls_reflect/1" purpose="audio controls reflect Test/Check if audio.controls returns true when the controls attribute is present in the audio element" result="PASS" /><testcase id="audio_controls_reflect/2" purpose="audio controls reflect Test/Check if audio.controls returns false after the controls attribute is set to false" result="PASS" /><testcase id="audio_controls_reflect/3" purpose="audio controls reflect Test/Check if audio.controls returns true after the controls attribute is set to true" result="PASS" /><testcase id="audio_currentSrc_default_value" purpose="Check if the default value of audio.currentSrc is a empty string" result="PASS" /><testcase id="audio_currentSrc_readonly" purpose="Check if the audio.currentSrc attribute is readonly" result="PASS" /><testcase id="audio_currentSrc_src_empty_string" purpose="Check if audio.currentSrc is empty string when set the audio.src empty string" result="PASS" /><testcase id="audio_currentSrc_src_null" purpose="Check if audio.currentSrc is empty string when set the audio.src null" result="PASS" /><testcase id="audio_currentTime_basic" purpose="Check if the audio.currentTime attribute return the current playback position it was set to 10" result="PASS" /><testcase id="audio_currentTime_default_value" purpose="Check if the audio.currentTime attribute initially be zero seconds in the absence of media data" result="PASS" /><testcase id="audio_currentTime_exception_INVALID_STATE_ERR" purpose="Check if the audio.currentTime attribute on setting that expecting TYPE_MISMATCH_ERR exception is to be thrown" result="PASS" /><testcase id="audio_currentTime_value_duration" purpose="Check if the audio.currentTime attribute return the end playback position it was set to duration" result="PASS" /><testcase id="audio_currentTime_value_later_end" purpose="Check if the audio.currentTime attribute return the end playback position it was set to later than the end of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_currentTime_value_null" purpose="Check if the audio.currentTime attribute on getting it must return 0 it was set to null" result="PASS" /><testcase id="audio_currentsrc/1" purpose="audio currentSrc Test/audio.currentSrc initial value" result="PASS" /><testcase id="audio_currentsrc/10" purpose="audio currentSrc Test/video.currentSrc initial value" result="PASS" /><testcase id="audio_currentsrc/11" purpose="audio currentSrc Test/video.currentSrc after setting src attribute &quot;&quot;" result="PASS" /><testcase id="audio_currentsrc/12" purpose="audio currentSrc Test/video.currentSrc after adding source element with src attribute &quot;&quot;" result="PASS" /><testcase id="audio_currentsrc/13" purpose="audio currentSrc Test/video.currentSrc after setting src attribute &quot;.&quot;" result="PASS" /><testcase id="audio_currentsrc/14" purpose="audio currentSrc Test/video.currentSrc after adding source element with src attribute &quot;.&quot;" result="PASS" /><testcase id="audio_currentsrc/15" purpose="audio currentSrc Test/video.currentSrc after setting src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_currentsrc/16" purpose="audio currentSrc Test/video.currentSrc after adding source element with src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_currentsrc/17" purpose="audio currentSrc Test/video.currentSrc after setting src attribute &quot;data:,&quot;" result="PASS" /><testcase id="audio_currentsrc/18" purpose="audio currentSrc Test/video.currentSrc after adding source element with src attribute &quot;data:,&quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_currentsrc/2" purpose="audio currentSrc Test/audio.currentSrc after setting src attribute &quot;&quot;" result="PASS" /><testcase id="audio_currentsrc/3" purpose="audio currentSrc Test/audio.currentSrc after adding source element with src attribute &quot;&quot;" result="PASS" /><testcase id="audio_currentsrc/4" purpose="audio currentSrc Test/audio.currentSrc after setting src attribute &quot;.&quot;" result="PASS" /><testcase id="audio_currentsrc/5" purpose="audio currentSrc Test/audio.currentSrc after adding source element with src attribute &quot;.&quot;" result="PASS" /><testcase id="audio_currentsrc/6" purpose="audio currentSrc Test/audio.currentSrc after setting src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_currentsrc/7" purpose="audio currentSrc Test/audio.currentSrc after adding source element with src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_currentsrc/8" purpose="audio currentSrc Test/audio.currentSrc after setting src attribute &quot;data:,&quot;" result="PASS" /><testcase id="audio_currentsrc/9" purpose="audio currentSrc Test/audio.currentSrc after adding source element with src attribute &quot;data:,&quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_currentsrc_property_exists" purpose="Check if the audio.currentSrc property exists" result="PASS" /><testcase id="audio_defaultMuted_empty_string" purpose="Check if the value of the attribute audio.defaultMuted set empty string,then compare media.defaultMuted is false" result="PASS" /><testcase id="audio_defaultMuted_null" purpose="Check if the value of the attribute audio.defaultMuted set null,then compare media.defaultMuted is false" result="PASS" /><testcase id="audio_defaultMuted_reflect/1" purpose="audio defaultMuted reflect Test/Check if audio.defaultMuted returns true when the muted attribute is present in the audio element" result="PASS" /><testcase id="audio_defaultMuted_reflect/2" purpose="audio defaultMuted reflect Test/Check if audio.defaultMuted returns true after the muted attribute is set to false when the muted attribute is present in the audio element" result="PASS" /><testcase id="audio_defaultMuted_reflect/3" purpose="audio defaultMuted reflect Test/Check if audio.defaultMuted returns false when the muted attribute is absent in the audio element" result="PASS" /><testcase id="audio_defaultMuted_reflect/4" purpose="audio defaultMuted reflect Test/Check if audio.defaultMuted returns false after the muted attribute is set to true when the muted attribute is absent in the audio element" result="PASS" /><testcase id="audio_defaultPlaybackRate_basic" purpose="Check if the audio.defaultPlaybackRate attribute that on getting it must return 0.5 it was set to 0.5" result="PASS" /><testcase id="audio_defaultPlaybackRate_default_value" purpose="Check if the audio.defaultPlaybackRate attribute return 1.0 if it hasn't yet been set" result="PASS" /><testcase id="audio_defaultPlaybackRate_not_effect_by_controller" purpose="Check if audio.defaultPlaybackRate attributes have no effect when the media element has a current media controller" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_defaultPlaybackRate_value_null" purpose="Check if the audio.defaultPlaybackRate attribute that on getting it must return 0 it was set to null" result="PASS" /><testcase id="audio_defaultPlaybackRate_value_zero" purpose="Check if the audio.defaultPlaybackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="audio_duration_attribute_readonly" purpose="Check if the audio.duration attribute is readonly" result="PASS" /><testcase id="audio_duration_attribute_value_NaN" purpose="Check if the audio.duration attribute return the Not-a-Number (NaN) value if no media data is available" result="PASS" /><testcase id="audio_duration_attribute_value_resource" purpose="Check if the audio.duration attribute return the time of the end of the media resource" result="PASS" /><testcase id="audio_element" purpose="Check if audio element returns same audio element twice" result="PASS" /><testcase id="audio_ended_attribute_readonly" purpose="Check if audio.ended is readonly" result="PASS" /><testcase id="audio_ended_canplaythrough" purpose="Check if the attribute audio.ended should be false during canplaythrough event" result="PASS" /><testcase id="audio_ended_currentTime_duration" purpose="Check if the value of attribute audio.ended is true when set currentTime audio.durations" result="PASS" /><testcase id="audio_ended_loaddata" purpose="Check if the value of attribute audio.ended is false during loadeddata event" result="PASS" /><testcase id="audio_ended_playing" purpose="Check if the value of attribute audio.ended is false during playing event" result="PASS" /><testcase id="audio_error_MEDIA_ERR_SRC_NOT_SUPPORTED" purpose="Check if audio.error.code is MEDIA_ERR_SRC_NOT_SUPPORTED if the source not support" result="PASS" /><testcase id="audio_error_property_exists" purpose="Check if audio.error property exists" result="PASS" /><testcase id="audio_error_readonly" purpose="Check if the audio.error attribute is readonly" result="PASS" /><testcase id="audio_event_canplay" purpose="Check that  canplay event is triggered if autoplay attribute present and src attibute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_canplaythrough" purpose="Check that canplaythrough event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_loadeddata" purpose="Check that loadedata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_loadedmetadata" purpose="Check that loadedmetadata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_loadstart" purpose="Check that loadstart event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="audio_event_order_canplay_canplaythrough" purpose="Check that canplay event is triggered, then canplaythrough event triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_order_canplay_playing" purpose="Check that canplay event is triggered, then playing event triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_order_loadedmetadata_loadeddata" purpose="Check that loadedmetadata event is triggered, then loadeddata event triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_order_loadstart_progress" purpose="Check that loadstart event is triggered, then progress event triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_play" purpose="Check that play event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_playing" purpose="Check that playing event is triggered if autoplay attribute present and src attibute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_event_progress" purpose="Check that progress event is triggered if autoplay attribute present and src attibute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_load_method" purpose="Check if audio.load can start selecting and loading a new media resource from scratch" result="PASS" /><testcase id="audio_load_method_exists" purpose="Check if the audio.load exists" result="PASS" /><testcase id="audio_load_method_type" purpose="Check if the type of audio.load is 'function'" result="PASS" /><testcase id="audio_loop_base" purpose="Check that seeking event is triggered more than once if audio.loop is set to true" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_loop_empty_string" purpose="Check if the value of the attribute audio.loop is false if set it empty string" result="PASS" /><testcase id="audio_loop_false_loop_absent" purpose="Check if audio.loop returns false when the loop attribute is absent in the audio element" result="PASS" /><testcase id="audio_loop_no_effect_by_controller" purpose="Checks that expecting the loop attribute has no effect, when the audio element has a current media controller" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_loop_null" purpose="Check if the value of the attribute audio.loop is false if set it null" result="PASS" /><testcase id="audio_loop_reflect/1" purpose="audio loop reflect Test/Check if audio.loop returns true when the loop attribute is present in the audio element" result="PASS" /><testcase id="audio_loop_reflect/2" purpose="audio loop reflect Test/Check if audio.loop returns false after the loop attribute is set to false" result="PASS" /><testcase id="audio_loop_reflect/3" purpose="audio loop reflect Test/Check if audio.loop returns true after the loop attribute is set to true" result="PASS" /><testcase id="audio_mediaGroup_empty_string" purpose="Check if the value of attribute of audio.mediaGroup is empty string when you set it empty string" result="PASS" /><testcase id="audio_mediaGroup_null" purpose="Check if the value of attribute audio.mediaGroup is empty string when set it null" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_mediaGroup_valid_value" purpose="Check if the value of audio.mediaGroup is valid" result="PASS" /><testcase id="audio_muted/1" purpose="audio muted Test/getting audio.muted (parser-created)" result="PASS" /><testcase id="audio_muted/10" purpose="audio muted Test/getting audio.muted (script-created)" result="PASS" /><testcase id="audio_muted/11" purpose="audio muted Test/setting audio.muted (script-created)" result="PASS" /><testcase id="audio_muted/12" purpose="audio muted Test/getting audio.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="audio_muted/13" purpose="audio muted Test/setting audio.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="audio_muted/14" purpose="audio muted Test/getting audio.muted with muted=&quot;&quot; (innerHTML-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/15" purpose="audio muted Test/getting audio.muted with muted=&quot;&quot; (document.write-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/16" purpose="audio muted Test/getting video.muted (script-created)" result="PASS" /><testcase id="audio_muted/17" purpose="audio muted Test/setting video.muted (script-created)" result="PASS" /><testcase id="audio_muted/18" purpose="audio muted Test/getting video.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="audio_muted/19" purpose="audio muted Test/setting video.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="audio_muted/2" purpose="audio muted Test/setting audio.muted (parser-created)" result="PASS" /><testcase id="audio_muted/20" purpose="audio muted Test/getting video.muted with muted=&quot;&quot; (innerHTML-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/21" purpose="audio muted Test/getting video.muted with muted=&quot;&quot; (document.write-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/3" purpose="audio muted Test/getting audio.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/4" purpose="audio muted Test/setting audio.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/5" purpose="audio muted Test/getting video.muted (parser-created)" result="PASS" /><testcase id="audio_muted/6" purpose="audio muted Test/setting video.muted (parser-created)" result="PASS" /><testcase id="audio_muted/7" purpose="audio muted Test/getting video.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/8" purpose="audio muted Test/setting video.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted/9" purpose="audio muted Test/getting video.muted with muted=&quot;&quot; after load (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_muted_false_muted_absent" purpose="Check if audio.muted returns false when the muted attribute is absent in the audio element" result="PASS" /><testcase id="audio_muted_volumechange" purpose="Check that volumechange event is triggered if audio.muted is changed" result="PASS" /><testcase id="audio_networkState_NETWORK_LOADING" purpose="Check if audio.networkState is NETWORK_LOADING when the user agent is actively trying to download data" result="PASS" /><testcase id="audio_networkState_NETWORK_NO_SOURCE" purpose="Check if audio.networkState is NETWORK_NO_SOURCE when not yet found a resource to use" result="PASS" /><testcase id="audio_networkState_readonly" purpose="Check if the audio.networkState attribute is readonly" result="PASS" /><testcase id="audio_networkstate_initial" purpose="Check that audio.networkState is NETWORK_EMPTY" result="PASS" /><testcase id="audio_networkstate_property_exists" purpose="Check that audio.networkState property exists" result="PASS" /><testcase id="audio_ondurationchange_event" purpose="Check if the event audio.ondurationchange occurs" result="PASS" /><testcase id="audio_onemptied_event" purpose="Check if the event audio.onemptied occurs" result="PASS" /><testcase id="audio_onended_event" purpose="Check if the event audio.onended occurs when media resource is end" result="PASS" /><testcase id="audio_onerror_event" purpose="Check if the event audio.onerror occurs" result="PASS" /><testcase id="audio_onpause_event" purpose="Check if the event audio.onpause occurs" result="PASS" /><testcase id="audio_onratechange_event_defaultPlaybackRate" purpose="Check if the event audio.onratechange occurs when defaultPlaybackRate changed" result="PASS" /><testcase id="audio_onratechange_event_playbackRate" purpose="Check if the event audio.onratechange occurs when playbackRate changed" result="PASS" /><testcase id="audio_onseeking_event" purpose="Check if the event audio.onseeking occurs" result="PASS" /><testcase id="audio_ontimeupdate_event" purpose="Check if the event audio.ontimeupdate occurs" result="PASS" /><testcase id="audio_onvolumechange_event_muted" purpose="Check if the event audio.onvolumechange occurs when muted changed" result="PASS" /><testcase id="audio_onvolumechange_event_volume" purpose="Check if the event audio.onvolumechange occurs when volume changed" result="PASS" /><testcase id="audio_onwaiting_event" purpose="Check if the event audio.onwaiting occurs" result="PASS" /><testcase id="audio_pause_aac" purpose="Check if the audio element can pause the AAC decoding format and the container format is aac" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_pause_amr" purpose="Check if the audio element can pause the AMR-NB decoding format audio file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_pause_method_exists" purpose="Check if audio.pause method exists" result="PASS" /><testcase id="audio_pause_method_type" purpose="Check if audio.pause is of type function" result="PASS" /><testcase id="audio_pause_mp3" purpose="Check if the audio element can pause the MP3 decoding format audio file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_pause_mp4_aac" purpose="Check if the audio element can pause the AAC decoding format audio file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_pause_ogg_vorbis" purpose="Check if user agent is able to pause playing audio playback for stream ogg vorbis" result="PASS" /><testcase id="audio_pause_wav_pcm" purpose="Check if user agent is able to pause playing audio playback for stream wav pcm" result="PASS" /><testcase id="audio_pause_webm_vorbis" purpose="Check if user agent is able to pause playing audio playback for stream webm vorbis" result="PASS" /><testcase id="audio_paused_attribute_readonly" purpose="Check if the audio.paused attribute is readonly" result="PASS" /><testcase id="audio_paused_false_during_play" purpose="Check that audio.paused is false if play event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_paused_true_during_pause" purpose="Check that audio.paused is true if pause event is triggered" result="PASS" /><testcase id="audio_play_aac" purpose="Check if the audio element can play the AAC decoding format and the container format is aac" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_play_amr" purpose="Check if the audio element can play the AMR-NB decoding format audio file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_play_method_exists" purpose="Check if audio.play method exists" result="PASS" /><testcase id="audio_play_method_type" purpose="Check if audio.play method is of type function" result="PASS" /><testcase id="audio_play_mp3" purpose="Check if the audio element can play the MP3 decoding format audio file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_play_mp4_aac" purpose="Check if the audio element can play the AAC decoding format audio file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_play_ogg_vorbis" purpose="Check if user agent is able to play audio stream ogg theora vorbis with event ended fired when ended playback" result="PASS" /><testcase id="audio_play_webm_vorbis" purpose="Check if user agent is able to play audio stream webm vorbis with event ended fired when ended playback" result="PASS" /><testcase id="audio_playbackRate_basic" purpose="Check if the audio.playbackRate attribute that on getting it must return 4.0 it was set to 4.0" result="PASS" /><testcase id="audio_playbackRate_default_value" purpose="Check if the audio.playbackRate attribute value is 1.0 if it hasn't yet been set" result="PASS" /><testcase id="audio_playbackRate_not_effect_by_controller" purpose="Check if audio.playbackRate attributes have no effect when the media element has a current media controller" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="audio_playbackRate_value_null" purpose="Check if the audio.playbackRate attribute return 0 it was set to null" result="PASS" /><testcase id="audio_playbackRate_value_zero" purpose="Check if the audio.playbackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="audio_played_attribute_readonly" purpose="Check if audio.played attribute is readonly" result="PASS" /><testcase id="audio_played_length_default_value" purpose="Check if default value of the attribute audio.played.length is 0" result="PASS" /><testcase id="audio_preload_auto" purpose="Check if audio.preload can be set to 'auto'" result="PASS" /><testcase id="audio_preload_property_exists" purpose="Check if audio.preload property exists" result="PASS" /><testcase id="audio_preload_reflects_auto_value" purpose="Check that audio.preload reflects 'auto' value" result="PASS" /><testcase id="audio_preload_reflects_metadata" purpose="Check that audio.preload reflects 'metadata' value" result="PASS" /><testcase id="audio_preload_reflects_none" purpose="Check that audio.preload reflects 'none' value" result="PASS" /><testcase id="audio_preload_reflects_none_autoplay" purpose="Check that audio.preload reflects 'none' value even if autoplay attribute is present" result="PASS" /><testcase id="audio_readystate_property_exists" purpose="Check if the audio.readyState property exists" result="PASS" /><testcase id="audio_resume_ogg_vorbis" purpose="Check if user agent is able to resume paused audio playback for stream ogg vorbis" result="PASS" /><testcase id="audio_resume_webm_vorbis" purpose="Check if user agent is able to resume paused audio playback for stream webm vorbis" result="PASS" /><testcase id="audio_seek_ogg_vorbis" purpose="Check if user agent is able to seek audio playback with currentTime attribute for stream ogg vorbis" result="PASS" /><testcase id="audio_seek_webm_vorbis" purpose="Check if user agent is able to seek audio playback with currentTime attribute for stream webm vorbis" result="PASS" /><testcase id="audio_seekable_attribute_readonly" purpose="Check if audio.seekable attribute is readonly" result="PASS" /><testcase id="audio_seekable_length_default_value" purpose="Check if the default value of attribute audio.seekable.length is 0" result="PASS" /><testcase id="audio_seeking_attribute_readonly" purpose="Check if the audio.seeking attribute is readonly" result="PASS" /><testcase id="audio_seeking_value_true" purpose="Check if the audio.seeking attribute returns true if the user agent is currently seeking" result="PASS" /><testcase id="audio_src_basic" purpose="Check if audio.src can get src attibute value" result="PASS" /><testcase id="audio_src_changed_trigger_loadstart" purpose="Check if a audio.src attribute of a media element is set or changed, the user agent must invoke the media element's media element load algorithm" result="PASS" /><testcase id="audio_src_default_value" purpose="Check if the default value of audio.src is a empty string" result="PASS" /><testcase id="audio_src_modify" purpose="Check if audio.src can be modified" result="PASS" /><testcase id="audio_src_null" purpose="Check if audio.src return empty string when you set it null" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="audio_src_reflects_no_value" purpose="Check that audio.src is empty if there is no source" result="PASS" /><testcase id="audio_src_removal_does_not_trigger_loadstart" purpose="Check that removing audio.src attribute tiggers loadstart event" result="PASS" /><testcase id="audio_stop_ogg_vorbis" purpose="Check if user agent is able to stop audio playback for stream ogg vorbis" result="PASS" /><testcase id="audio_stop_wav_pcm" purpose="Check if user agent is able to stop audio playback for stream wav pcm" result="PASS" /><testcase id="audio_stop_webm_vorbis" purpose="Check if user agent is able to stop audio playback for stream webm vorbis" result="PASS" /><testcase id="audio_volume_check/1" purpose="audio volume Test/Check if the intial value of the audio.volume is in the range 0.0 to 1.0 inclusive" result="PASS" /><testcase id="audio_volume_check/2" purpose="audio volume Test/Check if audio.volume is able to set to new value in the range 0.0 to 1.0" result="PASS" /><testcase id="audio_volume_check/3" purpose="audio volume Test/Check if media.volume is able to set to new value 0.0 as silent" result="PASS" /><testcase id="audio_volume_check/4" purpose="audio volume Test/Check if media.volume is able to set to new value 1.0 as loudest" result="PASS" /><testcase id="audio_volume_check/5" purpose="audio volume Test/Check if media.volume is set to new value less than 0.0 that expecting an IndexSizeError exception is to be thrown" result="PASS" /><testcase id="audio_volume_check/6" purpose="audio volume Test/Check if audio.volume is set to new value greater than 1.0 that expecting an IndexSizeError exception is to be thrown" result="PASS" /><testcase id="audio_volume_volumechange" purpose="Check that volumechange event is triggered if audio.volume is changed" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_mp4a" purpose="Check that audio.canPlayType method support mp4 format" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_vorbis" purpose="Check that audio.canPlayType method support vorbis format" result="PASS" /><testcase id="content_audio_readystate_during_canplay" purpose="Check that audio.readyState is greater than or equal to HAVE_FUTURE_DATA if canplay event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="content_audio_readystate_during_canplaythrough" purpose="Check that audio.readyState is HAVE_ENOUGH_DATA if canplaythrough event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="content_audio_readystate_during_loadeddata" purpose="Check that audio.readyState is greater than or equal to HAVE_CURRENT_DATA if loadeddata event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="content_audio_readystate_during_loadedmetadata" purpose="Check that audio.readyState is greater than or equal to HAVE_METADATA_DATA if loadedMETAdata event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="content_audio_readystate_during_playing" purpose="Check that audio.readyState is greater than or equal to HAVE_FUTURE_DATA if playing event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1831 XWALK-1831]]</testcase><testcase id="content_audio_readystate_initial" purpose="Check that audio.readyState initial value is HAVE_NOTHING" result="PASS" /><testcase id="content_audio_src_reflects_attribute_not_source_elements" purpose="Check that audio.src reflects the content attribute of the same name" result="PASS" /><testcase id="error_null_no_source" purpose="Check that the property of audio.error is null if no source" result="PASS" /></category><category name="W3C_HTML5 APIs/UI/Web Notifications"><testcase id="notification_constructor" purpose="Check if Notification has all valid arguments that expecting an notification is to be created" result="PASS" /><testcase id="notification_onclose_exist" purpose="Check if notification.onclose attribute exists" result="PASS" /><testcase id="notification_onclose_type" purpose="Check if the type notification.onclose attribute is object" result="PASS" /><testcase id="notification_permission_exists" purpose="Check if Notification.permission attribute exists" result="PASS" /><testcase id="notification_permission_readonly" purpose="Check if Notification.permission attribute is readonly" result="PASS" /><testcase id="notification_permission_type" purpose="Check if the type of Notification.permission attribute is string" result="PASS" /><testcase id="notification_requestPermission_exist" purpose="Check if notification.requestPermission method exists" result="PASS" /><testcase id="notification_requestPermission_type" purpose="Check if the type notification.requestPermission method is function" result="PASS" /><testcase id="notification_supports" purpose="Check if notification supports" result="PASS" /></category><category name="W3C_HTML5 APIs/Media/HTML5 The video element"><testcase id="canplaytype_application_octet_stream_with_codecs_avc_mp4a" purpose="Check if the video.canPlayType supports application/octet-stream with codecs='avc1.42E01E, mp4a.40.2'" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_theora_vorbis" purpose="Check if the video.canPlayType supports application/octet-stream with codecs='theora, vorbis'" result="PASS" /><testcase id="canplaytype_application_octet_stream_with_codecs_vp8_vorbis" purpose="Check if video.canPlayType supports application/octet-stream with codecs='vp8, vorbis'" result="PASS" /><testcase id="canplaytype_codecs_order_avc_mp4a" purpose="Check if the video.canPlayType supports video/webm after ordered the codecs's parameter(avc1.42E01E, mp4a.40.2)" result="PASS" /><testcase id="canplaytype_codecs_order_theora_vorbis" purpose="Check if the video.canPlayType supports video/webm after ordered the codecs's parameter(theora, vorbis)" result="PASS" /><testcase id="canplaytype_codecs_order_vp8_vorbis" purpose="Check if the video.canPlayType supports video/webm after ordered the codecs's parameter(vp8, vorbis)" result="PASS" /><testcase id="canplaytype_two_codecs_theora_vorbis_implies_one_theora" purpose="Check if the video.canPlayType has ability to play two codecs(theora, vorbis) implies the ability to play one(theora)" result="PASS" /><testcase id="canplaytype_two_codecs_theora_vorbis_implies_one_vorbis" purpose="Check if the video.canPlayType has ability to play two codecs(theora, vorbis) implies the ability to play one(vorbis)" result="PASS" /><testcase id="canplaytype_two_codecs_vp8_vorbis_implies_one_vorbis" purpose="Check if the video.canPlayType has ability to play two codecs(vp8, vorbis) implies the ability to play one(vorbis)" result="PASS" /><testcase id="canplaytype_two_codecs_vp8_vorbis_implies_one_vp8" purpose="Check if the video.canPlayType has ability to play two codecs(vp8, vorbis) implies the ability to play one(vp8)" result="PASS" /><testcase id="canplaytype_webm_supported_but_no_codecs_parameter" purpose="Check if the video.canPlayType supports video webm" result="PASS" /><testcase id="error_null" purpose="Check that the video.error return null if there is no source" result="PASS" /><testcase id="video_MediaController_buffered_exists" purpose="Check if the video.MediaController.buffered exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_buffered_readonly" purpose="Check if video.MediaController.buffered is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_buffered_type" purpose="Check if video.MediaController.buffered is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_currentTime_exists" purpose="Check if the video.MediaController.currentTime exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_currentTime_type" purpose="Check if video.MediaController.currentTime is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_defaultPlaybackRate_exists" purpose="Check if the video.MediaController.defaultPlaybackRate exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_defaultPlaybackRate_type" purpose="Check if video.MediaController.defaultPlaybackRate is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_duration_exists" purpose="Check if the video.MediaController.duration exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_duration_readonly" purpose="Check if video.MediaController.duration is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_duration_type" purpose="Check if video.MediaController.duration is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_ended" purpose="Check if video.controller.onended event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_muted_exists" purpose="Check if the video.MediaController.muted exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_muted_type" purpose="Check if video.MediaController.muted is of type boolean" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_oncanplay_event" purpose="Check if video.controller.canplay event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_oncanplaythrough_event" purpose="Check if video.controller.canplaythrough event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onemptied_event" purpose="Check if video.controller.emptied event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onloadeddata_event" purpose="Check if video.controller.loadeddata event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onloadedmetadata_event" purpose="Check if video.controller.loadedmetadata event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onpause_event" purpose="Check if video.controller.pause event occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onplay_event" purpose="Check if video.controller.onplay occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onplaying_event" purpose="Check if video.controller.onplaying is exists" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onratechange_event" purpose="Check if video.controller.onratechange is exists" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onvolumechange_event" purpose="Check if video.controller.onvolumechange is exists" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_onwaiting_event" purpose="Check if video.controller.onwaiting occurs" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_pause_exists" purpose="Check if the video.MediaController.pause exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_pause_type" purpose="Check if video.MediaController.pause is of type function" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_paused_exists" purpose="Check if the video.MediaController.paused exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_paused_readonly" purpose="Check if video.MediaController.paused is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_paused_type" purpose="Check if video.MediaController.paused is of type boolean" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_play_exists" purpose="Check if the video.MediaController.play exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_play_type" purpose="Check if video.MediaController.play is of type function" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_playbackRate_exists" purpose="Check if the video.MediaController.playbackRate exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_playbackRate_type" purpose="Check if video.MediaController.playbackRate is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_playbackState_ended" purpose="Check if video.MediaController.playbackState attribute is ended" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_playbackState_exists" purpose="Check if the video.MediaController.playbackState attribute exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_playbackState_playing" purpose="Check if video.MediaController.playbackState attribute is playing" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_playbackState_readonly" purpose="Check if video.MediaController.playbackState attribute is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_playbackState_type" purpose="Check if the type of video.MediaController.playbackState attribute is string" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_playbackState_waiting" purpose="Check if video.MediaController.playbackState attribute is waiting" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_played_exists" purpose="Check if the video.MediaController.played exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_played_readonly" purpose="Check if video.MediaController.played is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_played_type" purpose="Check if video.MediaController.played is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_seekable_exists" purpose="Check if the video.MediaController.seekable exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_seekable_readonly" purpose="Check if video.MediaController.seekable is readonly" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_seekable_type" purpose="Check if video.MediaController.seekable is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_unpause_base" purpose="Check if video.MediaController.unpause method, calling unpause method paused false callback play event" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_MediaController_unpause_exists" purpose="Check if the video.MediaController.unpause method exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_unpause_type" purpose="Check if the type of video.MediaController.unpause method is function" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_volume_exists" purpose="Check if the video.MediaController.volume exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaController_volume_type" purpose="Check if video.MediaController.volume is of type number" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_MediaError_MEDIA_ERR_ABORTED_constant_exists" purpose="Check if the video.error.MEDIA_ERR_ABORTED exists" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_ABORTED_constant_type" purpose="Check if the type of video.error.MEDIA_ERR_ABORTED is 'number'" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_ABORTED_constant_value" purpose="Check if video.error.MEDIA_ERR_ABORTED const value is 1" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_DECODE_constant_exists" purpose="Check if the video.error.MEDIA_ERR_DECODE exists" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_DECODE_constant_type" purpose="Check if the type of video.error.MEDIA_ERR_DECODE is 'number'" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_DECODE_constant_value" purpose="Check if video.error.MEDIA_ERR_DECODE const value is 3" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_NETWORK_constant_exists" purpose="Check if the video.error.MEDIA_ERR_NETWORK exists" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_NETWORK_constant_type" purpose="Check if the type of video.error.MEDIA_ERR_NETWORK is 'number'" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_NETWORK_constant_value" purpose="Check if video.error.MEDIA_ERR_NETWORK const value is 2" result="PASS" /><testcase id="video_MediaError_MEDIA_ERR_SRC_NOT_SUPPORTED_constant_exists" purpose="Check if the video.error.MEDIA_ERR_SRC_NOT_SUPPORTED exists" result="PASS" /><testcase id="video_MediaError_code_exists" purpose="Check if the video.error.code exists" result="PASS" /><testcase id="video_MediaError_code_readonly" purpose="Check if video.error.code is readonly" result="PASS" /><testcase id="video_MediaError_code_type" purpose="Check if the type of video.error.code is 'number'" result="PASS" /><testcase id="video_TimeRanges_end_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the video.TimeRanges.end method index is out of range" result="PASS" /><testcase id="video_TimeRanges_end_exists" purpose="Check if the video.TimeRanges.end attribute exists" result="PASS" /><testcase id="video_TimeRanges_length_exists" purpose="Check if the video.TimeRanges.length attribute exists" result="PASS" /><testcase id="video_TimeRanges_length_readonly" purpose="Check if video.TimeRanges.length is readonly" result="PASS" /><testcase id="video_TimeRanges_length_type" purpose="Check if video.TimeRanges.length is of type number" result="PASS" /><testcase id="video_TimeRanges_start_INDEX_SIZE_ERR" purpose="Check if throw INDEX_SIZE_ERR exception when if the video.TimeRanges.start method index is out of range" result="PASS" /><testcase id="video_TimeRanges_start_exists" purpose="Check if the video.TimeRanges.start method exists" result="PASS" /><testcase id="video_addTextTrack/1" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack bogus first arg" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_addTextTrack/10" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack foo and bar second and third arg" result="PASS" /><testcase id="video_addTextTrack/11" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack foo second arg, third arg omitted" result="PASS" /><testcase id="video_addTextTrack/2" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack uppercase first arg" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_addTextTrack/3" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack subtitles first arg" result="PASS" /><testcase id="video_addTextTrack/4" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack captions first arg" result="PASS" /><testcase id="video_addTextTrack/5" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack descriptions first arg" result="PASS" /><testcase id="video_addTextTrack/6" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack chapters first arg" result="PASS" /><testcase id="video_addTextTrack/7" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack metadata first arg" result="PASS" /><testcase id="video_addTextTrack/8" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack undefined second and third arg" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_addTextTrack/9" purpose="HTMLMediaElement addTextTrack Test/HTMLMediaElement.addTextTrack null second and third arg" result="PASS" /><testcase id="video_addTextTrack_exist" purpose="Check if the vedio.addTextTrack method exists" result="PASS" /><testcase id="video_addTextTrack_type" purpose="Check if the vedio.addTextTrack attribute is of type function" result="PASS" /><testcase id="video_attributes/1" purpose="video attributes Test/Check if video.error exists" result="PASS" /><testcase id="video_attributes/10" purpose="video attributes Test/Check if video.NETWORK_EMPTY is of type number" result="PASS" /><testcase id="video_attributes/100" purpose="video attributes Test/Check if video.videoHeight is of type number" result="PASS" /><testcase id="video_attributes/101" purpose="video attributes Test/Check if video.videoHeight initial value is in range [0, 4294967295]" result="PASS" /><testcase id="video_attributes/102" purpose="video attributes Test/Check if video.poster exists" result="PASS" /><testcase id="video_attributes/103" purpose="video attributes Test/Check if video.poster is of type string" result="PASS" /><testcase id="video_attributes/11" purpose="video attributes Test/Check if video.NETWORK_EMPTY is of default value 0" result="PASS" /><testcase id="video_attributes/12" purpose="video attributes Test/Check if video.NETWORK_IDLE exists" result="PASS" /><testcase id="video_attributes/13" purpose="video attributes Test/Check if video.NETWORK_IDLE is of type number" result="PASS" /><testcase id="video_attributes/14" purpose="video attributes Test/Check if video.NETWORK_IDLE is of default value 1" result="PASS" /><testcase id="video_attributes/15" purpose="video attributes Test/Check if video.NETWORK_LOADING exists" result="PASS" /><testcase id="video_attributes/16" purpose="video attributes Test/Check if video.NETWORK_LOADING is of type number" result="PASS" /><testcase id="video_attributes/17" purpose="video attributes Test/Check if video.NETWORK_LOADING is of default value 2" result="PASS" /><testcase id="video_attributes/18" purpose="video attributes Test/Check if video.NETWORK_NO_SOURCE exists" result="PASS" /><testcase id="video_attributes/19" purpose="video attributes Test/Check if video.NETWORK_NO_SOURCE is of type number" result="PASS" /><testcase id="video_attributes/2" purpose="video attributes Test/Check if video.error is of type object" result="PASS" /><testcase id="video_attributes/20" purpose="video attributes Test/Check if video.NETWORK_NO_SOURCE is of default value 3" result="PASS" /><testcase id="video_attributes/21" purpose="video attributes Test/Check if video.networkState exists" result="PASS" /><testcase id="video_attributes/22" purpose="video attributes Test/Check if video.networkState is of type number" result="PASS" /><testcase id="video_attributes/23" purpose="video attributes Test/Check if video.networkState initial value is in range [0, 65535]" result="PASS" /><testcase id="video_attributes/24" purpose="video attributes Test/Check if video.preload exists" result="PASS" /><testcase id="video_attributes/25" purpose="video attributes Test/Check if video.preload is of type string" result="PASS" /><testcase id="video_attributes/26" purpose="video attributes Test/Check if video.buffered exists" result="PASS" /><testcase id="video_attributes/27" purpose="video attributes Test/Check if video.buffered is of type object" result="PASS" /><testcase id="video_attributes/28" purpose="video attributes Test/Check if video.HAVE_NOTHING exists" result="PASS" /><testcase id="video_attributes/29" purpose="video attributes Test/Check if video.HAVE_NOTHING is of type number" result="PASS" /><testcase id="video_attributes/3" purpose="video attributes Test/Check if video.src exists" result="PASS" /><testcase id="video_attributes/30" purpose="video attributes Test/Check if video.HAVE_NOTHING is of default value 0" result="PASS" /><testcase id="video_attributes/31" purpose="video attributes Test/Check if video.HAVE_METADATA exists" result="PASS" /><testcase id="video_attributes/32" purpose="video attributes Test/Check if video.HAVE_METADATA is of type number" result="PASS" /><testcase id="video_attributes/33" purpose="video attributes Test/Check if video.HAVE_METADATA is of default value 1" result="PASS" /><testcase id="video_attributes/34" purpose="video attributes Test/Check if video.HAVE_CURRENT_DATA exists" result="PASS" /><testcase id="video_attributes/35" purpose="video attributes Test/Check if video.HAVE_CURRENT_DATA is of type number" result="PASS" /><testcase id="video_attributes/36" purpose="video attributes Test/Check if video.HAVE_CURRENT_DATA is of default value 2" result="PASS" /><testcase id="video_attributes/37" purpose="video attributes Test/Check if video.HAVE_FUTURE_DATA exists" result="PASS" /><testcase id="video_attributes/38" purpose="video attributes Test/Check if video.HAVE_FUTURE_DATA is of type number" result="PASS" /><testcase id="video_attributes/39" purpose="video attributes Test/Check if video.HAVE_FUTURE_DATA is of default value 3" result="PASS" /><testcase id="video_attributes/4" purpose="video attributes Test/Check if video.src is of type string" result="PASS" /><testcase id="video_attributes/40" purpose="video attributes Test/Check if video.HAVE_ENOUGH_DATA exists" result="PASS" /><testcase id="video_attributes/41" purpose="video attributes Test/Check if video.HAVE_ENOUGH_DATA is of type number" result="PASS" /><testcase id="video_attributes/42" purpose="video attributes Test/Check if video.HAVE_ENOUGH_DATA is of default value 4" result="PASS" /><testcase id="video_attributes/43" purpose="video attributes Test/Check if video.readyState exists" result="PASS" /><testcase id="video_attributes/44" purpose="video attributes Test/Check if video.readyState is of type number" result="PASS" /><testcase id="video_attributes/45" purpose="video attributes Test/Check if video.readyState initial value is in range [0, 65535]" result="PASS" /><testcase id="video_attributes/46" purpose="video attributes Test/Check if video.seeking exists" result="PASS" /><testcase id="video_attributes/47" purpose="video attributes Test/Check if video.seeking is of type boolean" result="PASS" /><testcase id="video_attributes/48" purpose="video attributes Test/Check if video.seeking initial value is false" result="PASS" /><testcase id="video_attributes/49" purpose="video attributes Test/Check if video.currentTime exists" result="PASS" /><testcase id="video_attributes/5" purpose="video attributes Test/Check if video.currentSrc exists" result="PASS" /><testcase id="video_attributes/50" purpose="video attributes Test/Check if video.currentTime is of type number" result="PASS" /><testcase id="video_attributes/51" purpose="video attributes Test/Check if video.duration exists" result="PASS" /><testcase id="video_attributes/52" purpose="video attributes Test/Check if video.duration is of type number" result="PASS" /><testcase id="video_attributes/53" purpose="video attributes Test/Check if video.startDate exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_attributes/54" purpose="video attributes Test/Check if video.startDate is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_attributes/55" purpose="video attributes Test/Check if video.paused exists" result="PASS" /><testcase id="video_attributes/56" purpose="video attributes Test/Check if video.paused is of type boolean" result="PASS" /><testcase id="video_attributes/57" purpose="video attributes Test/Check if video.paused initial value is true" result="PASS" /><testcase id="video_attributes/58" purpose="video attributes Test/Check if video.defaultPlaybackRate exists" result="PASS" /><testcase id="video_attributes/59" purpose="video attributes Test/Check if video.defaultPlaybackRate is of type number" result="PASS" /><testcase id="video_attributes/6" purpose="video attributes Test/Check if video.currentSrc is of type string" result="PASS" /><testcase id="video_attributes/60" purpose="video attributes Test/Check if video.playbackRate exists" result="PASS" /><testcase id="video_attributes/61" purpose="video attributes Test/Check if video.playbackRate is of type number" result="PASS" /><testcase id="video_attributes/62" purpose="video attributes Test/Check if video.played exists" result="PASS" /><testcase id="video_attributes/63" purpose="video attributes Test/Check if video.played is of type object" result="PASS" /><testcase id="video_attributes/64" purpose="video attributes Test/Check if video.seekable exists" result="PASS" /><testcase id="video_attributes/65" purpose="video attributes Test/Check if video.seekable is of type object" result="PASS" /><testcase id="video_attributes/66" purpose="video attributes Test/Check if video.ended exists" result="PASS" /><testcase id="video_attributes/67" purpose="video attributes Test/Check if video.ended is of type boolean" result="PASS" /><testcase id="video_attributes/68" purpose="video attributes Test/Check if video.ended initial value is false" result="PASS" /><testcase id="video_attributes/69" purpose="video attributes Test/Check if video.autoplay exists" result="PASS" /><testcase id="video_attributes/7" purpose="video attributes Test/Check if video.crossOrigin exists" result="PASS" /><testcase id="video_attributes/70" purpose="video attributes Test/Check if video.autoplay is of type boolean" result="PASS" /><testcase id="video_attributes/71" purpose="video attributes Test/Check if video.autoplay initial value is false" result="PASS" /><testcase id="video_attributes/72" purpose="video attributes Test/Check if video.loop exists" result="PASS" /><testcase id="video_attributes/73" purpose="video attributes Test/Check if video.loop is of type boolean" result="PASS" /><testcase id="video_attributes/74" purpose="video attributes Test/Check if video.loop initial value is false" result="PASS" /><testcase id="video_attributes/75" purpose="video attributes Test/Check if video.mediaGroup exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_attributes/76" purpose="video attributes Test/Check if video.mediaGroup is of type string" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_attributes/77" purpose="video attributes Test/Check if video.controller exists" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_attributes/78" purpose="video attributes Test/Check if video.controller is of type object" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_attributes/79" purpose="video attributes Test/Check if video.controls exists" result="PASS" /><testcase id="video_attributes/8" purpose="video attributes Test/Check if video.crossOrigin is of type string" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_attributes/80" purpose="video attributes Test/Check if video.controls is of type boolean" result="PASS" /><testcase id="video_attributes/81" purpose="video attributes Test/Check if video.controls initial value is false" result="PASS" /><testcase id="video_attributes/82" purpose="video attributes Test/Check if video.volume exists" result="PASS" /><testcase id="video_attributes/83" purpose="video attributes Test/Check if video.volume is of type number" result="PASS" /><testcase id="video_attributes/84" purpose="video attributes Test/Check if video.muted exists" result="PASS" /><testcase id="video_attributes/85" purpose="video attributes Test/Check if video.muted is of type boolean" result="PASS" /><testcase id="video_attributes/86" purpose="video attributes Test/Check if video.muted initial value is false" result="PASS" /><testcase id="video_attributes/87" purpose="video attributes Test/Check if video.defaultMuted exists" result="PASS" /><testcase id="video_attributes/88" purpose="video attributes Test/Check if video.defaultMuted is of type boolean" result="PASS" /><testcase id="video_attributes/89" purpose="video attributes Test/Check if video.defaultMuted initial value is false" result="PASS" /><testcase id="video_attributes/9" purpose="video attributes Test/Check if video.NETWORK_EMPTY exists" result="PASS" /><testcase id="video_attributes/90" purpose="video attributes Test/Check if video.width exists" result="PASS" /><testcase id="video_attributes/91" purpose="video attributes Test/Check if video.width is of type number" result="PASS" /><testcase id="video_attributes/92" purpose="video attributes Test/Check if video.width initial value is in range [0, 4294967295]" result="PASS" /><testcase id="video_attributes/93" purpose="video attributes Test/Check if video.height exists" result="PASS" /><testcase id="video_attributes/94" purpose="video attributes Test/Check if video.height is of type number" result="PASS" /><testcase id="video_attributes/95" purpose="video attributes Test/Check if video.height initial value is in range [0, 4294967295]" result="PASS" /><testcase id="video_attributes/96" purpose="video attributes Test/Check if video.videoWidth exists" result="PASS" /><testcase id="video_attributes/97" purpose="video attributes Test/Check if video.videoWidth is of type number" result="PASS" /><testcase id="video_attributes/98" purpose="video attributes Test/Check if video.videoWidth initial value is in range [0, 4294967295]" result="PASS" /><testcase id="video_attributes/99" purpose="video attributes Test/Check if video.videoHeight exists" result="PASS" /><testcase id="video_autoplay_empty_string" purpose="Check if the attribute video.autoplay is false when set it empty string" result="PASS" /><testcase id="video_autoplay_null" purpose="Check if the value of attribute of video.autoplay is false when you set it null" result="PASS" /><testcase id="video_autoplay_onloadedmetadata" purpose="Check if video.autoplay attribute invoked,then video.onloadedmetadata() function triggered" result="PASS" /><testcase id="video_autoplay_true_autoplay_present" purpose="Check if video.autoplay returns true when the controls attribute is present in the video element" result="PASS" /><testcase id="video_buffered_end_type" purpose="Check if the type of video.buffered.end is function" result="PASS" /><testcase id="video_buffered_length_default_value" purpose="Check if the video.buffered length is zero,typically this will be a single range anchored at the zero point" result="PASS" /><testcase id="video_buffered_readonly" purpose="Check if the video.buffered attribute is readonly" result="PASS" /><testcase id="video_buffered_start_type" purpose="Check if the type of video.buffered.start is function" result="PASS" /><testcase id="video_canPlayType_codecs/1" purpose="video canPlayType codecs Test/Check if the video.canPlayType supports video/mp4 of codecs's parameter(avc1.42E01E, mp4a.40.2)" result="PASS" /><testcase id="video_canPlayType_codecs/2" purpose="video canPlayType codecs Test/Check if the video.canPlayType supports video/mp4 of codecs's parameter(avc1.42E01E)" result="PASS" /><testcase id="video_canPlayType_codecs/3" purpose="video canPlayType codecs Test/Check if the video.canPlayType supports video/mp4 of codecs's parameter(avc1.42E01E, mp4a.40)" result="PASS" /><testcase id="video_canPlayType_empty_string" purpose="Check if video.canPlayType return empty string if arguments is a empty string" result="PASS" /><testcase id="video_canPlayType_method_type" purpose="Check if the type of video.canPlayType is 'function'" result="PASS" /><testcase id="video_canPlayType_null" purpose="Check if video.canPlayType return empty string if arguments is null" result="PASS" /><testcase id="video_canplaytype_application_octet_stream" purpose="Check if the video.canPlayType supports application/octet-stream" result="PASS" /><testcase id="video_canplaytype_bogus_type" purpose="Check if the video.canPlayType supports bogus type" result="PASS" /><testcase id="video_canplaytype_method_exists" purpose="Check if the video.canPlayType supports existence of canPlayType method" result="PASS" /><testcase id="video_canplaytype_mp4_supported_but_no_codecs_parameter" purpose="Check if the video.canPlayType supports video mp4" result="PASS" /><testcase id="video_canplaytype_ogg_supported_but_no_codecs_parameter" purpose="Check if the video.canPlayType supports video ogg" result="PASS" /><testcase id="video_controller_MediaControllerl" purpose="Check if the attribute video.controller is not null when set it an object MediaController" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_controller_default_value" purpose="Check if the defaut value of video.controller is null" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_controls_empty_string" purpose="Check if the value of attribute video.controls is false when set it empty string" result="PASS" /><testcase id="video_controls_false_controls_absent" purpose="Check if video.controls returns false when the controls attribute is absent in the video element" result="PASS" /><testcase id="video_controls_null" purpose="Check if the value of attribute video.controls is false when set it null" result="PASS" /><testcase id="video_controls_reflect/1" purpose="video controls reflect Test/Check if video.controls returns true when the controls attribute is present in the video element" result="PASS" /><testcase id="video_controls_reflect/2" purpose="video controls reflect Test/Check if video.controls returns false after the controls attribute is set to false" result="PASS" /><testcase id="video_controls_reflect/3" purpose="video controls reflect Test/Check if video.controls returns true after the controls attribute is set to true" result="PASS" /><testcase id="video_currentSrc_readonly" purpose="Check if the video.currentSrc attribute is readonly" result="PASS" /><testcase id="video_currentSrc_src_null" purpose="Check if video.currentSrc is empty string when set the video.src null" result="PASS" /><testcase id="video_currentTime_basic" purpose="Check if the video.currentTime attribute return the current playback position it was set to 10" result="PASS" /><testcase id="video_currentTime_less_than_zero" purpose="Check if user agent displays correctly when browser does not support media elements (Seeking to a value less than 'startTime' seeks to 'startTime')" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_currentTime_value_duration" purpose="Check if the video.currentTime attribute return the end playback position it was set to duration" result="PASS" /><testcase id="video_currentTime_value_later_end" purpose="Check if the video.currentTime attribute return the end playback position it was set to later than the end of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_currentTime_value_null" purpose="Check if the video.currentTime attribute on getting it must return 0 it was set to null" result="PASS" /><testcase id="video_currentsrc/1" purpose="video currentSrc Test/audio.currentSrc initial value" result="PASS" /><testcase id="video_currentsrc/10" purpose="video currentSrc Test/video.currentSrc initial value" result="PASS" /><testcase id="video_currentsrc/11" purpose="video currentSrc Test/video.currentSrc after setting src attribute &quot;&quot;" result="PASS" /><testcase id="video_currentsrc/12" purpose="video currentSrc Test/video.currentSrc after adding source element with src attribute &quot;&quot;" result="PASS" /><testcase id="video_currentsrc/13" purpose="video currentSrc Test/video.currentSrc after setting src attribute &quot;.&quot;" result="PASS" /><testcase id="video_currentsrc/14" purpose="video currentSrc Test/video.currentSrc after adding source element with src attribute &quot;.&quot;" result="PASS" /><testcase id="video_currentsrc/15" purpose="video currentSrc Test/video.currentSrc after setting src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_currentsrc/16" purpose="video currentSrc Test/video.currentSrc after adding source element with src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_currentsrc/17" purpose="video currentSrc Test/video.currentSrc after setting src attribute &quot;data:,&quot;" result="PASS" /><testcase id="video_currentsrc/18" purpose="video currentSrc Test/video.currentSrc after adding source element with src attribute &quot;data:,&quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_currentsrc/2" purpose="video currentSrc Test/audio.currentSrc after setting src attribute &quot;&quot;" result="PASS" /><testcase id="video_currentsrc/3" purpose="video currentSrc Test/audio.currentSrc after adding source element with src attribute &quot;&quot;" result="PASS" /><testcase id="video_currentsrc/4" purpose="video currentSrc Test/audio.currentSrc after setting src attribute &quot;.&quot;" result="PASS" /><testcase id="video_currentsrc/5" purpose="video currentSrc Test/audio.currentSrc after adding source element with src attribute &quot;.&quot;" result="PASS" /><testcase id="video_currentsrc/6" purpose="video currentSrc Test/audio.currentSrc after setting src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_currentsrc/7" purpose="video currentSrc Test/audio.currentSrc after adding source element with src attribute &quot; &quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_currentsrc/8" purpose="video currentSrc Test/audio.currentSrc after setting src attribute &quot;data:,&quot;" result="PASS" /><testcase id="video_currentsrc/9" purpose="video currentSrc Test/audio.currentSrc after adding source element with src attribute &quot;data:,&quot;" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_currentsrc_property_exists" purpose="Check if the video.currentSrc property exists" result="PASS" /><testcase id="video_defaultMuted_empty_string" purpose="Check if the value of the attribute video.defaultMuted set empty string,then compare media.defaultMuted is false" result="PASS" /><testcase id="video_defaultMuted_null" purpose="Check if the value of the attribute video.defaultMuted set null,then compare media.defaultMuted is false" result="PASS" /><testcase id="video_defaultMuted_reflect/1" purpose="video defaultMuted reflect Test/Check if video.defaultMuted returns true when the muted attribute is present in the video element" result="PASS" /><testcase id="video_defaultMuted_reflect/2" purpose="video defaultMuted reflect Test/Check if video.defaultMuted returns true after the muted attribute is set to false when the muted attribute is present in the video element" result="PASS" /><testcase id="video_defaultMuted_reflect/3" purpose="video defaultMuted reflect Test/Check if video.defaultMuted returns false when the muted attribute is absent in the video element" result="PASS" /><testcase id="video_defaultMuted_reflect/4" purpose="video defaultMuted reflect Test/Check if video.defaultMuted returns false after the muted attribute is set to true when the muted attribute is absent in the video element" result="PASS" /><testcase id="video_defaultPlaybackRate_basic" purpose="Check if the video.defaultPlaybackRate attribute that on getting it must return 0.5 it was set to 0.5" result="PASS" /><testcase id="video_defaultPlaybackRate_default_value" purpose="Check if the video.defaultPlaybackRate attribute return 1.0 if it hasn't yet been set" result="PASS" /><testcase id="video_defaultPlaybackRate_not_effect_by_controller" purpose="Check if video.defaultPlaybackRate attributes have no effect when the media element has a current media controller" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_defaultPlaybackRate_value_null" purpose="Check if the video.defaultPlaybackRate attribute that on getting it must return 0 it was set to null" result="PASS" /><testcase id="video_defaultPlaybackRate_value_zero" purpose="Check if the video.defaultPlaybackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="video_duration_attribute_readonly" purpose="Check if the video.duration attribute is readonly" result="PASS" /><testcase id="video_duration_attribute_value_NaN" purpose="Check if the video.duration attribute return the Not-a-Number (NaN) value if no media data is available" result="PASS" /><testcase id="video_duration_attribute_value_resource" purpose="Check if the video.duration attribute return the time of the end of the media resource" result="PASS" /><testcase id="video_element" purpose="Check if element returns same video element twice" result="PASS" /><testcase id="video_ended_attribute_readonly" purpose="Check if video.ended is readonly" result="PASS" /><testcase id="video_ended_canplaythrough" purpose="Check if the attribute video.ended should be false during canplaythrough event" result="PASS" /><testcase id="video_ended_currentTime_duration" purpose="Check if the value of attribute video.ended is true when set currentTime video.durations" result="PASS" /><testcase id="video_ended_loaddata" purpose="Check if the value of attribute video.ended is false during loadeddata event" result="PASS" /><testcase id="video_ended_playing" purpose="Check if the value of attribute video.ended is false during playing event" result="PASS" /><testcase id="video_error_property_exists" purpose="Check if the video.error property exists" result="PASS" /><testcase id="video_error_readonly" purpose="Check if the video.error attribute is readonly" result="PASS" /><testcase id="video_event_canplay" purpose="Check that the canplay event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_canplaythrough" purpose="Check that the canplaythrough event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_loadeddata" purpose="Check that the loadeddata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_loadedmetadata" purpose="Check that the loadedmetadata event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_loadstart" purpose="Check that the loadstart event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="PASS" /><testcase id="video_event_order_canplay_canplaythrough" purpose="Check that the canplay event is triggered before the canplaythrough event if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_order_canplay_playing" purpose="Check that the canplay event is triggered before the playing event if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_order_loadedmetadata_loadeddata" purpose="Check that the loadedmetadata event is triggered before the loadeddata event if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_order_loadstart_progress" purpose="Check that the loadstart event triggered before the progress event if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_play" purpose="Check that play event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_playing" purpose="Check that the playing event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_event_progress" purpose="Check that the progress event is triggered if autoplay attribute present and src attribute give right address of the media resource" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_height_reflect/1" purpose="video height reflect Test/Check if video.height intial value is a valid non-negative integer in the range 0 to 2147483647 inclusive" result="PASS" /><testcase id="video_height_reflect/2" purpose="video height reflect Test/Check if video.height returns zero after the height attribute is set to zero" result="PASS" /><testcase id="video_height_reflect/3" purpose="video height reflect Test/Check if video.height returns maximum non-negative integer after the height attribute is set to the maximum non-negative integer" result="PASS" /><testcase id="video_height_reflect/4" purpose="video height reflect Test/Check if video.height returns the integer number after the height attribute is set to a valid non-negative integer in the range 0 to 2147483647" result="PASS" /><testcase id="video_height_reflect/5" purpose="video height reflect Test/Check if video.height returns a shortest integer number after the height attribute is set to a floating-point number" result="PASS" /><testcase id="video_height_reflect/6" purpose="video height reflect Test/Check if video.height returns zero after the height attribute is set to a number greater than the maximum non-negative integer" result="PASS" /><testcase id="video_height_reflect/7" purpose="video height reflect Test/Check if video.height returns zero after the height attribute is set to a negative integer" result="PASS" /><testcase id="video_height_reflect/8" purpose="video height reflect Test/Check if video.height returns zero after the height attribute is set to an invlid non-negative integer" result="PASS" /><testcase id="video_load_method" purpose="Check if video.load can start selecting and loading a new media resource from scratch" result="PASS" /><testcase id="video_load_method_exists" purpose="Check if the video.load attribute exists" result="PASS" /><testcase id="video_load_method_type" purpose="Check if the type of video.load is 'function'" result="PASS" /><testcase id="video_loop_base" purpose="Check that the seeking event is triggered more than once  if the video.loop is set to true" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_loop_empty_string" purpose="Check if the value of the attribute video.loop is false if set it empty string" result="PASS" /><testcase id="video_loop_false_loop_absent" purpose="Check if video.loop returns false when the loop attribute is absent in the video element" result="PASS" /><testcase id="video_loop_null" purpose="Check if the value of the attribute video.loop is false if set it null" result="PASS" /><testcase id="video_loop_reflect/1" purpose="video loop reflect Test/Check if video.loop returns true when the loop attribute is present in the video element" result="PASS" /><testcase id="video_loop_reflect/2" purpose="video loop reflect Test/Check if video.loop returns false after the loop attribute is set to false" result="PASS" /><testcase id="video_loop_reflect/3" purpose="video loop reflect Test/Check if video.loop returns true after the loop attribute is set to true" result="PASS" /><testcase id="video_mediaGroup_empty_string" purpose="Check if the value of attribute of video.mediaGroup is empty string when you set it empty string" result="PASS" /><testcase id="video_mediaGroup_null" purpose="Check if the value of attribute video.mediaGroup when set it null" result="PASS" /><testcase id="video_mediaGroup_valid_value" purpose="Check if the value of video.mediaGroup is valid" result="PASS" /><testcase id="video_muted/1" purpose="video muted Test/getting audio.muted (parser-created)" result="PASS" /><testcase id="video_muted/10" purpose="video muted Test/getting audio.muted (script-created)" result="PASS" /><testcase id="video_muted/11" purpose="video muted Test/setting audio.muted (script-created)" result="PASS" /><testcase id="video_muted/12" purpose="video muted Test/getting audio.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="video_muted/13" purpose="video muted Test/setting audio.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="video_muted/14" purpose="video muted Test/getting audio.muted with muted=&quot;&quot; (innerHTML-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/15" purpose="video muted Test/getting audio.muted with muted=&quot;&quot; (document.write-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/16" purpose="video muted Test/getting video.muted (script-created)" result="PASS" /><testcase id="video_muted/17" purpose="video muted Test/setting video.muted (script-created)" result="PASS" /><testcase id="video_muted/18" purpose="video muted Test/getting video.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="video_muted/19" purpose="video muted Test/setting video.muted with muted=&quot;&quot; (script-created)" result="PASS" /><testcase id="video_muted/2" purpose="video muted Test/setting audio.muted (parser-created)" result="PASS" /><testcase id="video_muted/20" purpose="video muted Test/getting video.muted with muted=&quot;&quot; (innerHTML-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/21" purpose="video muted Test/getting video.muted with muted=&quot;&quot; (document.write-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/3" purpose="video muted Test/getting audio.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/4" purpose="video muted Test/setting audio.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/5" purpose="video muted Test/getting video.muted (parser-created)" result="PASS" /><testcase id="video_muted/6" purpose="video muted Test/setting video.muted (parser-created)" result="PASS" /><testcase id="video_muted/7" purpose="video muted Test/getting video.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/8" purpose="video muted Test/setting video.muted with muted=&quot;&quot; (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted/9" purpose="video muted Test/getting video.muted with muted=&quot;&quot; after load (parser-created)" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_muted_volumechange" purpose="Check that the volumechange event is triggered at the media element if the video.muted is changed" result="PASS" /><testcase id="video_networkState_readonly" purpose="Check if the video.networkState attribute is readonly" result="PASS" /><testcase id="video_networkstate_initial" purpose="Check if the default value of video.networState is NETWORK_EMPTY" result="PASS" /><testcase id="video_networkstate_property_exists" purpose="Check if the video.networkState property exists" result="PASS" /><testcase id="video_ondurationchange_event" purpose="Check if the event video.ondurationchange occurs" result="PASS" /><testcase id="video_onemptied_event" purpose="Check if the event video.onemptied occurs" result="PASS" /><testcase id="video_onended_event" purpose="Check if the event video.onended occurs when media resource is end" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_onerror_event" purpose="Check if the event video.onerror occurs" result="PASS" /><testcase id="video_onpause_event" purpose="Check if the event video.onpause occurs" result="PASS" /><testcase id="video_onratechange_event_defaultPlaybackRate" purpose="Check if the event video.onratechange occurs when defaultPlaybackRate changed" result="PASS" /><testcase id="video_onratechange_event_playbackRate" purpose="Check if the event video.onratechange occurs when playbackRate changed" result="PASS" /><testcase id="video_onseeking_event" purpose="Check if the event video.onseeking occurs" result="PASS" /><testcase id="video_ontimeupdate_event" purpose="Check if the event video.ontimeupdate occurs" result="PASS" /><testcase id="video_onvolumechange_event_muted" purpose="Check if the event video.onvolumechange occurs when muted changed" result="PASS" /><testcase id="video_onvolumechange_event_volume" purpose="Check if the event video.onvolumechange occurs when volume changed" result="PASS" /><testcase id="video_onwaiting_event" purpose="Check if the event video.onwaiting occurs" result="PASS" /><testcase id="video_pause_3gp_h263_aac" purpose="Check if the video element can pause the H.263 decoding format video file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_pause_3gp_mpeg4_amr" purpose="Check if the video element can pause the MPEG-4 part 2 decoding format video file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_pause_method_exists" purpose="Check if the video.pause method exists" result="PASS" /><testcase id="video_pause_method_type" purpose="Check if video.pause is of type function" result="PASS" /><testcase id="video_pause_mp4_h264_aac" purpose="Check if the user agent supports mp4-h264-acc video playing, pause" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_pause_ogg_theora_vorbis" purpose="Check if user agent is able to pause playing video playback for stream ogg theora vorbis" result="PASS" /><testcase id="video_pause_webm_vp8_vorbis" purpose="Check if user agent is able to pause playing video playback for stream webm vp8 vorbis" result="PASS" /><testcase id="video_paused_attribute_readonly" purpose="Check if the video.paused attribute is readonly" result="PASS" /><testcase id="video_paused_false_during_play" purpose="Check that video.paused is false if play event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_paused_true_during_pause" purpose="Check that video.paused is true if pause event is triggered" result="PASS" /><testcase id="video_play_3gp_h263_aac" purpose="Check if the video element can play the H.263 decoding format video file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_play_3gp_mpeg4_amr" purpose="Check if the video element can play the MPEG-4 part 2 decoding format video file" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_play_method_exists" purpose="Check if the video.play method exists" result="PASS" /><testcase id="video_play_method_type" purpose="Check if video.play method is of type function" result="PASS" /><testcase id="video_play_mp4_h264_aac" purpose="Check if the user agent supports mp4-h264-acc video playing" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_play_ogg_theora_vorbis" purpose="Check if user agent is able to play video stream ogg theora vorbis with event ended fired when ended playback" result="PASS" /><testcase id="video_play_webm_vp8_vorbis" purpose="Check if user agent is able to play video stream webm vp8 vorbis with event ended fired when ended playback" result="PASS" /><testcase id="video_playbackRate/1" purpose="video playbackRate Test/playbackRate initial value" result="PASS" /><testcase id="video_playbackRate/2" purpose="video playbackRate Test/setting playbackRate" result="PASS" /><testcase id="video_playbackRate_not_effect_by_controller" purpose="Check if video.playbackRate attributes have no effect when the media element has a current media controller" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_playbackRate_value_null" purpose="Check if the video.playbackRate attribute return 0 it was set to null" result="PASS" /><testcase id="video_playbackRate_value_zero" purpose="Check if the video.playbackRate attribute that on getting it must return 0 it was set to 0" result="PASS" /><testcase id="video_played_attribute_readonly" purpose="Check if video.played attribute is readonly" result="PASS" /><testcase id="video_played_length_default_value" purpose="Check if default value of the attribute video.played.length is 0" result="PASS" /><testcase id="video_preload_auto" purpose="Check if video.preload can be set to 'auto'" result="PASS" /><testcase id="video_preload_property_exists" purpose="Check if the video.preload property exists" result="PASS" /><testcase id="video_preload_reflects_auto_value" purpose="Check if video.preload reflects 'auto' value" result="PASS" /><testcase id="video_preload_reflects_metadata" purpose="Check if the video.preload reflects 'metadata' value" result="PASS" /><testcase id="video_preload_reflects_none" purpose="Check if the video.preload reflects 'none' value" result="PASS" /><testcase id="video_preload_reflects_none_autoplay" purpose="Check that video.preload reflects 'none' value even if autoplay attribute is present" result="PASS" /><testcase id="video_readystate_during_canplay" purpose="Check that the video.readyState is greater than or equal to HAVE_FUTURE_DATA if canplay event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_readystate_during_canplaythrough" purpose="Check that the video.readyState is HAVE_FUTURE_DATA if canplaythrough event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_readystate_during_loadeddata" purpose="Check that video.readyState is greater than or equal to HAVE_FUTURE_DATA if the loadeddata event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_readystate_during_loadedmetadata" purpose="Check that the video.readyState is greater than or equal to HAVE_FUTURE_DATA if loadedmetadata event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_readystate_during_playing" purpose="Check that video.readyState is greater than or equal to HAVE_FUTURE_DATA if playing event is triggered" result="BLOCK">[[https://crosswalk-project.org/jira/browse/XWALK-1832 XWALK-1832]]</testcase><testcase id="video_readystate_initial" purpose="Check if the default video.readyState begins with HAVE_NOTHING" result="PASS" /><testcase id="video_readystate_property_exists" purpose="Check if the video.readyState property exists" result="PASS" /><testcase id="video_resume_ogg_theora_vorbis" purpose="Check if user agent is able to resume paused video playback for stream ogg theora vorbis" result="PASS" /><testcase id="video_resume_webm_vp8_vorbis" purpose="Check if user agent is able to resume paused video playback for stream webm vp8 vorbis" result="PASS" /><testcase id="video_seek_ogg_theora_vorbis" purpose="Check if user agent is able to seek video playback with currentTime attribute for stream ogg theora vorbis" result="PASS" /><testcase id="video_seek_webm_vp8_vorbis" purpose="Check if user agent is able to seek video playback with currentTime attribute for stream webm vp8 vorbis" result="PASS" /><testcase id="video_seekable_attribute_readonly" purpose="Check if video.seekable attribute is readonly" result="PASS" /><testcase id="video_seekable_length_default_value" purpose="Check if the default value of attribute video.seekable.length is 0" result="PASS" /><testcase id="video_seeking_attribute_readonly" purpose="Check if the video.seeking attribute is readonly" result="PASS" /><testcase id="video_seeking_value_true" purpose="Check if the video.seeking attribute returns true if the user agent is currently seeking" result="PASS" /><testcase id="video_src_basic" purpose="Check if video.src can get src attibute value" result="PASS" /><testcase id="video_src_null" purpose="Check if video.src return empty string when you set it null" result="FAIL">[[https://crosswalk-project.org/jira/browse/XWALK-2906 XWALK-2906]]</testcase><testcase id="video_src_reflects_attribute_not_source_elements" purpose="Check if video.src reflect src attribute, not source child elements" result="PASS" /><testcase id="video_src_reflects_no_value" purpose="Check that the video.src is empty if there is no source" result="PASS" /><testcase id="video_src_removal_does_not_trigger_loadstart" purpose="Check that the loadstart event isnot triggered if remove video.src attribute source" result="PASS" /><testcase id="video_stop_ogg_theora_vorbis" purpose="Check if user agent is able to stop video playback for stream ogg theora vorbis" result="PASS" /><testcase id="video_stop_webm_vp8_vorbis" purpose="Check if user agent is able to stop video playback for stream webm vp8 vorbis" result="PASS" /><testcase id="video_textTracks" purpose="Check if the video.textTracks attribute is valid" result="PASS" /><testcase id="video_textTracks_exist" purpose="Check if the vedio.textTracks attribute exists" result="PASS" /><testcase id="video_textTracks_readonly" purpose="Check if the vedio.textTracks attribute is readonly" result="PASS" /><testcase id="video_textTracks_type" purpose="Check if the type of vedio.textTracks attribute is object" result="PASS" /><testcase id="video_textTracks_valid_value" purpose="Check if the textTracks attribute of media elements must return an array host object for objects of type TextTrack" result="PASS" /><testcase id="video_videoHeght_media_resource_available" purpose="Check if video.videoheight return the intrinsic height of the video when have a media resource" result="PASS" /><testcase id="video_videoHeight_readState_HAVE_NOTHING" purpose="Check if readyState attribute is HAVE_NOTHING, then video.videoHeight must return 0" result="PASS" /><testcase id="video_videoHeight_readonly" purpose="Check if the videoHeight attribute is readonly" result="PASS" /><testcase id="video_videoWidth_media_resource_available" purpose="Check if video.videoWidth return the intrinsic width of the video when have a media resource" result="PASS" /><testcase id="video_videoWidth_readonly" purpose="Check if the videoWidth attribute is readonly" result="PASS" /><testcase id="video_volume_check/1" purpose="video volume Test/Check if the intial value of the video.volume is in the range 0.0 to 1.0 inclusive" result="PASS" /><testcase id="video_volume_check/2" purpose="video volume Test/Check if video.volume is able to set to new value in the range 0.0 to 1.0" result="PASS" /><testcase id="video_volume_check/3" purpose="video volume Test/Check if media.volume is able to set to new value 0.0 as silent" result="PASS" /><testcase id="video_volume_check/4" purpose="video volume Test/Check if media.volume is able to set to new value 1.0 as loudest" result="PASS" /><testcase id="video_volume_check/5" purpose="video volume Test/Check if media.volume is set to new value less than 0.0 that expecting an IndexSizeError exception is to be thrown" result="PASS" /><testcase id="video_volume_check/6" purpose="video volume Test/Check if video.volume is set to new value greater than 1.0 that expecting an IndexSizeError exception is to be thrown" result="PASS" /><testcase id="video_volume_volumechange" purpose="Check that the volumechange event is triggered at the media element if video.volume is changed" result="PASS" /><testcase id="video_width_reflect/1" purpose="video width reflect Test/Check if video.width intial value is a valid non-negative integer in the range 0 to 2147483647 inclusive" result="PASS" /><testcase id="video_width_reflect/2" purpose="video width reflect Test/Check if video.width returns zero after the width attribute is set to zero" result="PASS" /><testcase id="video_width_reflect/3" purpose="video width reflect Test/Check if video.width returns maximum non-negative integer after the width attribute is set to the maximum non-negative integer" result="PASS" /><testcase id="video_width_reflect/4" purpose="video width reflect Test/Check if video.width returns the integer number after the width attribute is set to a valid non-negative integer in the range 0 to 2147483647" result="PASS" /><testcase id="video_width_reflect/5" purpose="video width reflect Test/Check if video.width returns a shortest integer number after the width attribute is set to a floating-point number" result="PASS" /><testcase id="video_width_reflect/6" purpose="video width reflect Test/Check if video.width returns zero after the width attribute is set to a number greater than the maximum non-negative integer" result="PASS" /><testcase id="video_width_reflect/7" purpose="video width reflect Test/Check if video.width returns zero after the width attribute is set to a negative integer" result="PASS" /><testcase id="video_width_reflect/8" purpose="video width reflect Test/Check if video.width returns zero after the width attribute is set to an invlid non-negative integer" result="PASS" /><testcase id="video_zero_default_state" purpose="Check that a video loads the default pause state is true" result="PASS" /></category></test_definition>